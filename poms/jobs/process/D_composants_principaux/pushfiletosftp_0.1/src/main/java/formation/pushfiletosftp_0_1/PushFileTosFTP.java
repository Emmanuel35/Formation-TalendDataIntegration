// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package formation.pushfiletosftp_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: PushFileTosFTP Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class PushFileTosFTP implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (FTP_Temp != null) {

				this.setProperty("FTP_Temp", FTP_Temp.toString());

			}

			if (ConnectTimeout != null) {

				this.setProperty("ConnectTimeout", ConnectTimeout.toString());

			}

			if (Password != null) {

				this.setProperty("Password", Password.toString());

			}

			if (Port != null) {

				this.setProperty("Port", Port.toString());

			}

			if (PrivateKey != null) {

				this.setProperty("PrivateKey", PrivateKey.toString());

			}

			if (SecretKey != null) {

				this.setProperty("SecretKey", SecretKey.toString());

			}

			if (Server != null) {

				this.setProperty("Server", Server.toString());

			}

			if (User != null) {

				this.setProperty("User", User.toString());

			}

			if (ARN_DIR != null) {

				this.setProperty("ARN_DIR", ARN_DIR.toString());

			}

		}

		public String FTP_Temp;

		public String getFTP_Temp() {
			return this.FTP_Temp;
		}

		public Integer ConnectTimeout;

		public Integer getConnectTimeout() {
			return this.ConnectTimeout;
		}

		public java.lang.String Password;

		public java.lang.String getPassword() {
			return this.Password;
		}

		public Integer Port;

		public Integer getPort() {
			return this.Port;
		}

		public String PrivateKey;

		public String getPrivateKey() {
			return this.PrivateKey;
		}

		public String SecretKey;

		public String getSecretKey() {
			return this.SecretKey;
		}

		public String Server;

		public String getServer() {
			return this.Server;
		}

		public String User;

		public String getUser() {
			return this.User;
		}

		public String ARN_DIR;

		public String getARN_DIR() {
			return this.ARN_DIR;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "PushFileTosFTP";
	private final String projectName = "FORMATION";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					PushFileTosFTP.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(PushFileTosFTP.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tSetGlobalVar_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileCopy_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPPut_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPPut_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPPut_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				int tos_count_tSetGlobalVar_1 = 0;

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 main ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				globalMap.put("NOW", TalendDate.formatDate("yyyyMMdd_HHmmss", TalendDate.getCurrentDate()));

				tos_count_tSetGlobalVar_1++;

				/**
				 * [tSetGlobalVar_1 main ] stop
				 */

				/**
				 * [tSetGlobalVar_1 process_data_begin ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 process_data_begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 process_data_end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 process_data_end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tSetGlobalVar_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tFTPConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}

	public void tFTPConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFTPConnection_1 begin ] start
				 */

				ok_Hash.put("tFTPConnection_1", false);
				start_Hash.put("tFTPConnection_1", System.currentTimeMillis());

				currentComponent = "tFTPConnection_1";

				int tos_count_tFTPConnection_1 = 0;

				int connectionTimeout_tFTPConnection_1 = Integer.valueOf(context.ConnectTimeout);
				class MyUserInfo implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {

					String decryptedPassphrase_tFTPConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
							"enc:routine.encryption.key.v1:tjbEyQnakbLhsh/ysEz07CamMnzirvSeyEXWX6KwVbh8TX+PI6UnrT61z867");

					String passphrase_tFTPConnection_1 = decryptedPassphrase_tFTPConnection_1;

					public String getPassphrase() {
						return passphrase_tFTPConnection_1;
					}

					public String getPassword() {
						return null;
					}

					public boolean promptPassword(String arg0) {
						return true;
					}

					public boolean promptPassphrase(String arg0) {
						return true;
					}

					public boolean promptYesNo(String arg0) {
						return true;
					}

					public void showMessage(String arg0) {
					}

					public String[] promptKeyboardInteractive(String destination, String name, String instruction,
							String[] prompt, boolean[] echo) {

						final String decryptedPassword_tFTPConnection_1 = routines.system.PasswordEncryptUtil
								.decryptPassword(
										"enc:routine.encryption.key.v1:zKNh2Jlqn1xFZEjUan6etb5VFIM2eaTFQm8lQw==");

						String[] password_tFTPConnection_1 = { decryptedPassword_tFTPConnection_1 };
						return password_tFTPConnection_1;
					}
				}
				;
				final com.jcraft.jsch.UserInfo defaultUserInfo_tFTPConnection_1 = new MyUserInfo();

				boolean retry_tFTPConnection_1 = false;
				int retry_count_tFTPConnection_1 = 0;
				int retry_max_tFTPConnection_1 = 5;

				com.jcraft.jsch.Session session_tFTPConnection_1 = null;
				com.jcraft.jsch.Channel channel_tFTPConnection_1 = null;
				do {
					retry_tFTPConnection_1 = false;

					com.jcraft.jsch.JSch jsch_tFTPConnection_1 = new com.jcraft.jsch.JSch();

					jsch_tFTPConnection_1.addIdentity(context.PrivateKey,
							defaultUserInfo_tFTPConnection_1.getPassphrase());

					session_tFTPConnection_1 = jsch_tFTPConnection_1.getSession(context.User, context.Server,
							context.Port);
					session_tFTPConnection_1.setConfig("PreferredAuthentications",
							"publickey,password,keyboard-interactive,gssapi-with-mic");

					session_tFTPConnection_1.setUserInfo(defaultUserInfo_tFTPConnection_1);
					if (("true").equals(System.getProperty("http.proxySet"))) {
						com.jcraft.jsch.ProxyHTTP proxy_tFTPConnection_1 = new com.jcraft.jsch.ProxyHTTP(
								System.getProperty("http.proxyHost"),
								Integer.parseInt(System.getProperty("http.proxyPort")));
						if (!"".equals(System.getProperty("http.proxyUser"))) {
							proxy_tFTPConnection_1.setUserPasswd(System.getProperty("http.proxyUser"),
									System.getProperty("http.proxyPassword"));
						}
						session_tFTPConnection_1.setProxy(proxy_tFTPConnection_1);
					} else if ("local".equals(System.getProperty("http.proxySet"))) {
						String uriString = context.Server + ":" + context.Port;
						java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance()
								.getProxyForUriString(uriString);

						if (!proxyToUse.equals(java.net.Proxy.NO_PROXY)) {
							java.net.InetSocketAddress proxyAddress = (java.net.InetSocketAddress) proxyToUse.address();
							String proxyHost = proxyAddress.getAddress().getHostAddress();
							int proxyPort = proxyAddress.getPort();

							com.jcraft.jsch.ProxyHTTP proxy_tFTPConnection_1 = new com.jcraft.jsch.ProxyHTTP(proxyHost,
									proxyPort);

							org.talend.proxy.ProxyCreds proxyCreds = org.talend.proxy.TalendProxyAuthenticator
									.getInstance().getCredsForProxyURI(proxyHost + ":" + proxyPort);
							if (proxyCreds != null) {
								proxy_tFTPConnection_1.setUserPasswd(proxyCreds.getUser(), proxyCreds.getPass());
							}

							session_tFTPConnection_1.setProxy(proxy_tFTPConnection_1);
						}
					}

					channel_tFTPConnection_1 = null;
					try {
						if (connectionTimeout_tFTPConnection_1 > 0) {
							session_tFTPConnection_1.connect(connectionTimeout_tFTPConnection_1);
						} else {
							session_tFTPConnection_1.connect();
						}
						channel_tFTPConnection_1 = session_tFTPConnection_1.openChannel("sftp");
						if (connectionTimeout_tFTPConnection_1 > 0) {
							channel_tFTPConnection_1.connect(connectionTimeout_tFTPConnection_1);
						} else {
							channel_tFTPConnection_1.connect();
						}
					} catch (com.jcraft.jsch.JSchException e_tFTPConnection_1) {
						try {
							if (channel_tFTPConnection_1 != null) {
								channel_tFTPConnection_1.disconnect();
							}

							if (session_tFTPConnection_1 != null) {
								session_tFTPConnection_1.disconnect();
							}
						} catch (java.lang.Exception ce_tFTPConnection_1) {
						}

						String message_tFTPConnection_1 = new TalendException(null, null, null)
								.getExceptionCauseMessage(e_tFTPConnection_1);
						if (message_tFTPConnection_1.contains("Signature length not correct")
								|| message_tFTPConnection_1.contains("connection is closed by foreign host")) {
							retry_tFTPConnection_1 = true;
							retry_count_tFTPConnection_1++;
						} else {
							throw e_tFTPConnection_1;
						}
					}
				} while (retry_tFTPConnection_1 && (retry_count_tFTPConnection_1 < retry_max_tFTPConnection_1));

				com.jcraft.jsch.ChannelSftp c_tFTPConnection_1 = (com.jcraft.jsch.ChannelSftp) channel_tFTPConnection_1;

				globalMap.put("conn_tFTPConnection_1", c_tFTPConnection_1);

				/**
				 * [tFTPConnection_1 begin ] stop
				 */

				/**
				 * [tFTPConnection_1 main ] start
				 */

				currentComponent = "tFTPConnection_1";

				tos_count_tFTPConnection_1++;

				/**
				 * [tFTPConnection_1 main ] stop
				 */

				/**
				 * [tFTPConnection_1 process_data_begin ] start
				 */

				currentComponent = "tFTPConnection_1";

				/**
				 * [tFTPConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tFTPConnection_1 process_data_end ] start
				 */

				currentComponent = "tFTPConnection_1";

				/**
				 * [tFTPConnection_1 process_data_end ] stop
				 */

				/**
				 * [tFTPConnection_1 end ] start
				 */

				currentComponent = "tFTPConnection_1";

				ok_Hash.put("tFTPConnection_1", true);
				end_Hash.put("tFTPConnection_1", System.currentTimeMillis());

				/**
				 * [tFTPConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFTPConnection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tFileList_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFTPConnection_1 finally ] start
				 */

				currentComponent = "tFTPConnection_1";

				/**
				 * [tFTPConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tFileCopy_1 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());

				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = context.ARN_DIR;
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_1.add("*.csv");
				for (final String filemask_tFileList_1 : maskList_tFileList_1) {
					String filemask_compile_tFileList_1 = filemask_tFileList_1;

					filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(
							filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_1);
					patternList_tFileList_1.add(fileNamePattern_tFileList_1);
				}
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
				java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
								if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()) {
									if (!filePath_tFileList_1.contains(file.getAbsolutePath())) {
										list_tFileList_1.add(file);
										filePath_tFileList_1.add(file.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				Comparator<java.io.File> fileNameASC_tFileList_1 = new Comparator<java.io.File>() {

					public int compare(java.io.File o1, java.io.File o2) {
						boolean bO1IsFile = o1.isFile();
						boolean bO2IsFile = o2.isFile();

						if (bO1IsFile && bO2IsFile) {
							return (o1.getName()).compareTo(o2.getName());
						} else if (bO1IsFile && (!bO2IsFile)) {
							return 1;
						} else if ((!bO1IsFile) && bO2IsFile) {
							return -1;
						} else if (!bO1IsFile && !bO2IsFile) {
							return (o1.getName()).compareTo(o2.getName());
						} else {
							return 0;
						}
					}
				};
				java.util.Collections.sort(list_tFileList_1, fileNameASC_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1.getName()
								.substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */

					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */

					/**
					 * [tFileList_1 process_data_begin ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_begin ] stop
					 */
					NB_ITERATE_tFileCopy_1++;

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileCopy_1);
						// Thread.sleep(1000);
					}

					/**
					 * [tFileCopy_1 begin ] start
					 */

					ok_Hash.put("tFileCopy_1", false);
					start_Hash.put("tFileCopy_1", System.currentTimeMillis());

					currentComponent = "tFileCopy_1";

					int tos_count_tFileCopy_1 = 0;

					/**
					 * [tFileCopy_1 begin ] stop
					 */

					/**
					 * [tFileCopy_1 main ] start
					 */

					currentComponent = "tFileCopy_1";

					String srcFileName_tFileCopy_1 = ((String) globalMap.get("tFileList_1_CURRENT_FILEPATH"));

					java.io.File srcFile_tFileCopy_1 = new java.io.File(srcFileName_tFileCopy_1);

					// here need check first, before mkdirs().
					if (!srcFile_tFileCopy_1.exists() || !srcFile_tFileCopy_1.isFile()) {
						String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1 = String.format(
								"The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_1);
						throw new RuntimeException(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1);
					}
					String desDirName_tFileCopy_1 = context.FTP_Temp + ((String) globalMap.get("NOW"));

					String desFileName_tFileCopy_1 = srcFile_tFileCopy_1.getName();

					if (desFileName_tFileCopy_1 != null && ("").equals(desFileName_tFileCopy_1.trim())) {
						desFileName_tFileCopy_1 = "NewName.temp";
					}

					java.io.File desFile_tFileCopy_1 = new java.io.File(desDirName_tFileCopy_1,
							desFileName_tFileCopy_1);

					if (!srcFile_tFileCopy_1.getPath().equals(desFile_tFileCopy_1.getPath())
							&& !desFile_tFileCopy_1.exists()) {
						java.io.File parentFile_tFileCopy_1 = desFile_tFileCopy_1.getParentFile();

						if (parentFile_tFileCopy_1 != null && !parentFile_tFileCopy_1.exists()) {
							parentFile_tFileCopy_1.mkdirs();
						}
						org.talend.FileCopy.copyFile(srcFile_tFileCopy_1.getPath(), desFile_tFileCopy_1.getPath(),
								false);

					}
					globalMap.put("tFileCopy_1_DESTINATION_FILEPATH", desFile_tFileCopy_1.getPath());
					globalMap.put("tFileCopy_1_DESTINATION_FILENAME", desFile_tFileCopy_1.getName());

					globalMap.put("tFileCopy_1_SOURCE_DIRECTORY", srcFile_tFileCopy_1.getParent());
					globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY", desFile_tFileCopy_1.getParent());

					tos_count_tFileCopy_1++;

					/**
					 * [tFileCopy_1 main ] stop
					 */

					/**
					 * [tFileCopy_1 process_data_begin ] start
					 */

					currentComponent = "tFileCopy_1";

					/**
					 * [tFileCopy_1 process_data_begin ] stop
					 */

					/**
					 * [tFileCopy_1 process_data_end ] start
					 */

					currentComponent = "tFileCopy_1";

					/**
					 * [tFileCopy_1 process_data_end ] stop
					 */

					/**
					 * [tFileCopy_1 end ] start
					 */

					currentComponent = "tFileCopy_1";

					ok_Hash.put("tFileCopy_1", true);
					end_Hash.put("tFileCopy_1", System.currentTimeMillis());

					/**
					 * [tFileCopy_1 end ] stop
					 */
					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileCopy_1);
					}

					/**
					 * [tFileList_1 process_data_end ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				/**
				 * [tFileList_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
			}

			tFTPPut_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_1 finally ] start
				 */

				currentComponent = "tFileList_1";

				/**
				 * [tFileList_1 finally ] stop
				 */

				/**
				 * [tFileCopy_1 finally ] start
				 */

				currentComponent = "tFileCopy_1";

				/**
				 * [tFileCopy_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public void tFTPPut_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFTPPut_1 begin ] start
				 */

				ok_Hash.put("tFTPPut_1", false);
				start_Hash.put("tFTPPut_1", System.currentTimeMillis());

				currentComponent = "tFTPPut_1";

				int tos_count_tFTPPut_1 = 0;

				int nb_file_tFTPPut_1 = 0;
// *** sftp *** //

				class MyProgressMonitor_tFTPPut_1 implements com.jcraft.jsch.SftpProgressMonitor {
					public void init(int op, String src, String dest, long max) {
					}

					public boolean count(long count) {
						return true;
					}

					public void end() {
					}
				}

				com.jcraft.jsch.ChannelSftp c_tFTPPut_1 = (com.jcraft.jsch.ChannelSftp) globalMap
						.get("conn_tFTPConnection_1");

				if (c_tFTPPut_1.getHome() != null && !c_tFTPPut_1.getHome().equals(c_tFTPPut_1.pwd())) {
					c_tFTPPut_1.cd(c_tFTPPut_1.getHome());
				}

				String rootDir_tFTPPut_1 = c_tFTPPut_1.pwd();
				String remotedir_tFTPPut_1 = (((String) globalMap.get("NOW"))).replaceAll("\\\\", "/");
				String[] dirsTree_tFTPPut_1 = remotedir_tFTPPut_1.split("/");
				for (String dir : dirsTree_tFTPPut_1) {
					if (dir.isEmpty())
						continue;

					try {
						c_tFTPPut_1.cd(dir);
					} catch (com.jcraft.jsch.SftpException ignored) {
						c_tFTPPut_1.mkdir(dir);
						c_tFTPPut_1.cd(dir);
					}
				}
				// back to the root
				c_tFTPPut_1.cd(rootDir_tFTPPut_1);

				// because there is not the same method in JSch class as FTPClient class, define
				// a list here
				java.util.List<String> msg_tFTPPut_1 = new java.util.ArrayList<String>();
				com.jcraft.jsch.SftpProgressMonitor monitortFTPPut_1 = new MyProgressMonitor_tFTPPut_1();
				java.util.List<java.util.Map<String, String>> listtFTPPut_1 = new java.util.ArrayList<java.util.Map<String, String>>();

				java.util.Map<String, String> maptFTPPut_10 = new java.util.HashMap<String, String>();
				maptFTPPut_10.put("*.csv", "");
				listtFTPPut_1.add(maptFTPPut_10);
				String localdirtFTPPut_1 = context.FTP_Temp + ((String) globalMap.get("NOW"));

				class StatCheck_tFTPPut_1 {

					boolean statOK(com.jcraft.jsch.ChannelSftp client, String path) {
						try {
							return client.stat(path).getAtimeString() != null;
						} catch (Exception e) {

						}

						return false;
					}

				}

				StatCheck_tFTPPut_1 sc_tFTPPut_1 = new StatCheck_tFTPPut_1();

				for (java.util.Map<String, String> maptFTPPut_1 : listtFTPPut_1) {

					/**
					 * [tFTPPut_1 begin ] stop
					 */

					/**
					 * [tFTPPut_1 main ] start
					 */

					currentComponent = "tFTPPut_1";

					try {
						globalMap.put("tFTPPut_1_CURRENT_STATUS", "No file transfered.");
						java.util.Set<String> keySettFTPPut_1 = maptFTPPut_1.keySet();
						for (String keytFTPPut_1 : keySettFTPPut_1) {
							if (keytFTPPut_1 == null || "".equals(keytFTPPut_1)) {
								System.err.println("file name invalid!");
								continue;
							}
							String tempdirtFTPPut_1 = localdirtFTPPut_1;
							String filemasktFTPPut_1 = keytFTPPut_1;
							String dirtFTPPut_1 = null;
							String masktFTPPut_1 = filemasktFTPPut_1.replaceAll("\\\\", "/");
							int itFTPPut_1 = masktFTPPut_1.lastIndexOf('/');
							if (itFTPPut_1 != -1) {
								dirtFTPPut_1 = masktFTPPut_1.substring(0, itFTPPut_1);
								masktFTPPut_1 = masktFTPPut_1.substring(itFTPPut_1 + 1);
							}
							if (dirtFTPPut_1 != null && !"".equals(dirtFTPPut_1))
								tempdirtFTPPut_1 = tempdirtFTPPut_1 + "/" + dirtFTPPut_1;
							masktFTPPut_1 = masktFTPPut_1.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*");
							final String finalMasktFTPPut_1 = masktFTPPut_1;
							java.io.File[] listingstFTPPut_1 = null;
							java.io.File filetFTPPut_1 = new java.io.File(tempdirtFTPPut_1);
							if (filetFTPPut_1.isDirectory()) {
								listingstFTPPut_1 = filetFTPPut_1.listFiles(new java.io.FileFilter() {
									public boolean accept(java.io.File pathname) {
										boolean result = false;
										if (pathname != null && pathname.isFile()) {
											result = java.util.regex.Pattern.compile(finalMasktFTPPut_1)
													.matcher(pathname.getName()).find();
										}
										return result;
									}
								});
							}
							if (listingstFTPPut_1 != null && listingstFTPPut_1.length > 0) {
								for (int mtFTPPut_1 = 0; mtFTPPut_1 < listingstFTPPut_1.length; mtFTPPut_1++) {
									if (listingstFTPPut_1[mtFTPPut_1].getName().matches(masktFTPPut_1)) {

										int modetFTPPut_1 = com.jcraft.jsch.ChannelSftp.OVERWRITE;
										boolean putSuccess_tFTPPut_1 = false;

										String remoteDir_tFTPPut_1 = ((String) globalMap.get("NOW"));
										if (remoteDir_tFTPPut_1 == null) {
											remoteDir_tFTPPut_1 = "";
										}
										remoteDir_tFTPPut_1 = remoteDir_tFTPPut_1.trim();
										if (remoteDir_tFTPPut_1.endsWith("/")) {
											remoteDir_tFTPPut_1 = remoteDir_tFTPPut_1.substring(0,
													remoteDir_tFTPPut_1.length() - 1);
										}
										String dest_tFTPPut_1 = remoteDir_tFTPPut_1 + "/"
												+ listingstFTPPut_1[mtFTPPut_1].getName();

										try {
											c_tFTPPut_1.put(listingstFTPPut_1[mtFTPPut_1].getAbsolutePath(),
													dest_tFTPPut_1, monitortFTPPut_1, modetFTPPut_1);
											// add info to list will return
											msg_tFTPPut_1.add("file: " + listingstFTPPut_1[mtFTPPut_1].getAbsolutePath()
													+ ", size: " + listingstFTPPut_1[mtFTPPut_1].length()
													+ " bytes upload successfully");
											globalMap.put("tFTPPut_1_CURRENT_STATUS", "File transfer OK.");

											putSuccess_tFTPPut_1 = true;

											if (sc_tFTPPut_1.statOK(c_tFTPPut_1, dest_tFTPPut_1)) {
												globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS", true);
											}
										} catch (com.jcraft.jsch.SftpException e_tFTPPut_1) {
											globalMap.put("tFTPPut_1_CURRENT_STATUS", "File transfer fail.");

											if (!putSuccess_tFTPPut_1) {
												if (sc_tFTPPut_1.statOK(c_tFTPPut_1, dest_tFTPPut_1)) {
													globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS", true);
												}
											}
											throw (e_tFTPPut_1);
										} catch (java.lang.Exception e_tFTPPut_1) {
											if (!(e_tFTPPut_1 instanceof com.jcraft.jsch.SftpException)) {
												msg_tFTPPut_1
														.add("file " + listingstFTPPut_1[mtFTPPut_1].getAbsolutePath()
																+ " not found?");

												globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS", false);
											}
											throw e_tFTPPut_1;
										}
										nb_file_tFTPPut_1++;
									}
								}
							} else {
								System.err.println("No match file exist!");
							}

							// do rename
							if (!((maptFTPPut_1.get(keytFTPPut_1) == null) || maptFTPPut_1.get(keytFTPPut_1).isEmpty()
									|| keytFTPPut_1.equals(maptFTPPut_1.get(keytFTPPut_1)))) {
								try {
									c_tFTPPut_1
											.rm(((String) globalMap.get("NOW")) + "/" + maptFTPPut_1.get(keytFTPPut_1));
								} catch (com.jcraft.jsch.SftpException e_tFTPPut_1) {
								}
								try {
									c_tFTPPut_1.rename(((String) globalMap.get("NOW")) + "/" + keytFTPPut_1,
											((String) globalMap.get("NOW")) + "/" + maptFTPPut_1.get(keytFTPPut_1));
									globalMap.put("tFTPPut_1_CURRENT_STATUS", "File rename OK.");
								} catch (com.jcraft.jsch.SftpException e_tFTPPut_1) {
									globalMap.put("tFTPPut_1_CURRENT_STATUS", "File rename fail.");
									throw e_tFTPPut_1;
								}
							}
						}

					} catch (java.lang.Exception e_tFTPPut_1) {
						throw (e_tFTPPut_1);
					}

					tos_count_tFTPPut_1++;

					/**
					 * [tFTPPut_1 main ] stop
					 */

					/**
					 * [tFTPPut_1 process_data_begin ] start
					 */

					currentComponent = "tFTPPut_1";

					/**
					 * [tFTPPut_1 process_data_begin ] stop
					 */

					/**
					 * [tFTPPut_1 process_data_end ] start
					 */

					currentComponent = "tFTPPut_1";

					/**
					 * [tFTPPut_1 process_data_end ] stop
					 */

					/**
					 * [tFTPPut_1 end ] start
					 */

					currentComponent = "tFTPPut_1";

				}
				msg_tFTPPut_1.add(nb_file_tFTPPut_1 + " files have been uploaded.");

				StringBuffer sb_tFTPPut_1 = new StringBuffer();
				for (String item_tFTPPut_1 : msg_tFTPPut_1) {
					sb_tFTPPut_1.append(item_tFTPPut_1).append("\n");
				}
				globalMap.put("tFTPPut_1_TRANSFER_MESSAGES", sb_tFTPPut_1.toString());

				globalMap.put("tFTPPut_1_NB_FILE", nb_file_tFTPPut_1);

				ok_Hash.put("tFTPPut_1", true);
				end_Hash.put("tFTPPut_1", System.currentTimeMillis());

				/**
				 * [tFTPPut_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFTPPut_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
			}

			tFTPClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFTPPut_1 finally ] start
				 */

				currentComponent = "tFTPPut_1";

				/**
				 * [tFTPPut_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 1);
	}

	public void tFTPClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFTPClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFTPClose_1 begin ] start
				 */

				ok_Hash.put("tFTPClose_1", false);
				start_Hash.put("tFTPClose_1", System.currentTimeMillis());

				currentComponent = "tFTPClose_1";

				int tos_count_tFTPClose_1 = 0;

				Object connObj = globalMap.get("conn_tFTPConnection_1");
				if (connObj != null) {
					try {

						com.jcraft.jsch.ChannelSftp channel = (com.jcraft.jsch.ChannelSftp) connObj;
						com.jcraft.jsch.Session session = channel.getSession();
						channel.disconnect();
						session.disconnect();

					} catch (Exception e) {
						globalMap.put("tFTPClose_1_ERROR_MESSAGE", e.getMessage());
						throw e;
					}
				}

				/**
				 * [tFTPClose_1 begin ] stop
				 */

				/**
				 * [tFTPClose_1 main ] start
				 */

				currentComponent = "tFTPClose_1";

				tos_count_tFTPClose_1++;

				/**
				 * [tFTPClose_1 main ] stop
				 */

				/**
				 * [tFTPClose_1 process_data_begin ] start
				 */

				currentComponent = "tFTPClose_1";

				/**
				 * [tFTPClose_1 process_data_begin ] stop
				 */

				/**
				 * [tFTPClose_1 process_data_end ] start
				 */

				currentComponent = "tFTPClose_1";

				/**
				 * [tFTPClose_1 process_data_end ] stop
				 */

				/**
				 * [tFTPClose_1 end ] start
				 */

				currentComponent = "tFTPClose_1";

				ok_Hash.put("tFTPClose_1", true);
				end_Hash.put("tFTPClose_1", System.currentTimeMillis());

				/**
				 * [tFTPClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFTPClose_1 finally ] start
				 */

				currentComponent = "tFTPClose_1";

				Object connObj = globalMap.get("conn_tFTPConnection_1");
				if (connObj != null) {
					com.jcraft.jsch.ChannelSftp channel = (com.jcraft.jsch.ChannelSftp) connObj;
					com.jcraft.jsch.Session session = channel.getSession();
					channel.disconnect();
					session.disconnect();

				}

				/**
				 * [tFTPClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPClose_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "PROD";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final PushFileTosFTP PushFileTosFTPClass = new PushFileTosFTP();

		int exitCode = PushFileTosFTPClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = PushFileTosFTP.class.getClassLoader()
					.getResourceAsStream("formation/pushfiletosftp_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = PushFileTosFTP.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("FTP_Temp", "id_String");
					context.FTP_Temp = (String) context.getProperty("FTP_Temp");
					context.setContextType("ConnectTimeout", "id_Integer");
					try {
						context.ConnectTimeout = routines.system.ParserUtils
								.parseTo_Integer(context.getProperty("ConnectTimeout"));
					} catch (NumberFormatException e) {
						System.err.println(String.format("Null value will be used for context parameter %s: %s",
								"ConnectTimeout", e.getMessage()));
						context.ConnectTimeout = null;
					}
					context.setContextType("Password", "id_Password");
					String pwd_Password_value = context.getProperty("Password");
					context.Password = null;
					if (pwd_Password_value != null) {
						if (context_param.containsKey("Password")) {// no need to decrypt if it come from program
																	// argument or parent job runtime
							context.Password = pwd_Password_value;
						} else if (!pwd_Password_value.isEmpty()) {
							try {
								context.Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_Password_value);
								context.put("Password", context.Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("Port", "id_Integer");
					try {
						context.Port = routines.system.ParserUtils.parseTo_Integer(context.getProperty("Port"));
					} catch (NumberFormatException e) {
						System.err.println(String.format("Null value will be used for context parameter %s: %s", "Port",
								e.getMessage()));
						context.Port = null;
					}
					context.setContextType("PrivateKey", "id_File");
					context.PrivateKey = (String) context.getProperty("PrivateKey");
					context.setContextType("SecretKey", "id_String");
					context.SecretKey = (String) context.getProperty("SecretKey");
					context.setContextType("Server", "id_String");
					context.Server = (String) context.getProperty("Server");
					context.setContextType("User", "id_String");
					context.User = (String) context.getProperty("User");
					context.setContextType("ARN_DIR", "id_Directory");
					context.ARN_DIR = (String) context.getProperty("ARN_DIR");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("FTP_Temp")) {
				context.FTP_Temp = (String) parentContextMap.get("FTP_Temp");
			}
			if (parentContextMap.containsKey("ConnectTimeout")) {
				context.ConnectTimeout = (Integer) parentContextMap.get("ConnectTimeout");
			}
			if (parentContextMap.containsKey("Password")) {
				context.Password = (java.lang.String) parentContextMap.get("Password");
			}
			if (parentContextMap.containsKey("Port")) {
				context.Port = (Integer) parentContextMap.get("Port");
			}
			if (parentContextMap.containsKey("PrivateKey")) {
				context.PrivateKey = (String) parentContextMap.get("PrivateKey");
			}
			if (parentContextMap.containsKey("SecretKey")) {
				context.SecretKey = (String) parentContextMap.get("SecretKey");
			}
			if (parentContextMap.containsKey("Server")) {
				context.Server = (String) parentContextMap.get("Server");
			}
			if (parentContextMap.containsKey("User")) {
				context.User = (String) parentContextMap.get("User");
			}
			if (parentContextMap.containsKey("ARN_DIR")) {
				context.ARN_DIR = (String) parentContextMap.get("ARN_DIR");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tSetGlobalVar_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tSetGlobalVar_1) {
			globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", -1);

			e_tSetGlobalVar_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : PushFileTosFTP");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeFtpConnections();

	}

	private void closeFtpConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tFTPConnection_1");
			if (obj_conn != null) {
				((com.jcraft.jsch.ChannelSftp) obj_conn).quit();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		connections.put("conn_tFTPConnection_1", globalMap.get("conn_tFTPConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 69023 characters generated by Talend Open Studio for Data Integration on the
 * 5 juin 2020 11:16:19 CEST
 ************************************************************************************************/