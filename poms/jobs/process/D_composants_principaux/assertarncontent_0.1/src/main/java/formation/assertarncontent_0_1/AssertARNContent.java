// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package formation.assertarncontent_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: AssertARNContent Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class AssertARNContent implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (ARN_DIR != null) {

				this.setProperty("ARN_DIR", ARN_DIR.toString());

			}

		}

		public String ARN_DIR;

		public String getARN_DIR() {
			return this.ARN_DIR;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "AssertARNContent";
	private final String projectName = "FORMATION";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils("_QW-TsKcTEeqcJuLZiEd-8g", "0.1");
	MetterCatcherUtils tFlowMeterCatcher_1 = new MetterCatcherUtils("_QW-TsKcTEeqcJuLZiEd-8g", "0.1");
	AssertCatcherUtils tAssertCatcher_1 = new AssertCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					AssertARNContent.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(AssertARNContent.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception", currentComponent, 6,
								e.getClass().getName() + ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tAssertCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		if (!(exception instanceof TDieException)) {

			tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error",
					exception.getMessage());

			tAssertCatcher_1Process(globalMap);
		}

		status = "failure";

		tAssertCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		if (!(exception instanceof TDieException)) {

			tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error",
					exception.getMessage());

			tAssertCatcher_1Process(globalMap);
		}

		status = "failure";

		tAssertCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tChronometerStart_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tChronometerStart_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAssert_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputXML_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError1", 0, "error");
			}

			errorCode = null;
			tDie_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		if (!(exception instanceof TDieException)) {

			tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error",
					exception.getMessage());

			tAssertCatcher_1Process(globalMap);
		}

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		if (!(exception instanceof TDieException)) {

			tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error",
					exception.getMessage());

			tAssertCatcher_1Process(globalMap);
		}

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputXML_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		if (!(exception instanceof TDieException)) {

			tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error",
					exception.getMessage());

			tAssertCatcher_1Process(globalMap);
		}

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		if (!(exception instanceof TDieException)) {

			tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error",
					exception.getMessage());

			tAssertCatcher_1Process(globalMap);
		}

		status = "failure";

		tWarn_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void vFlowMeter_row1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tChronometerStop_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		if (!(exception instanceof TDieException)) {

			tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error",
					exception.getMessage());

			tAssertCatcher_1Process(globalMap);
		}

		status = "failure";

		tChronometerStop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowMeterCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		if (!(exception instanceof TDieException)) {

			tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error",
					exception.getMessage());

			tAssertCatcher_1Process(globalMap);
		}

		status = "failure";

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		if (!(exception instanceof TDieException)) {

			tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error",
					exception.getMessage());

			tAssertCatcher_1Process(globalMap);
		}

		status = "failure";

		tFlowMeterCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		if (!(exception instanceof TDieException)) {

			tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error",
					exception.getMessage());

			tAssertCatcher_1Process(globalMap);
		}

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		if (!(exception instanceof TDieException)) {

			tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error",
					exception.getMessage());

			tAssertCatcher_1Process(globalMap);
		}

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		if (!(exception instanceof TDieException)) {

			tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error",
					exception.getMessage());

			tAssertCatcher_1Process(globalMap);
		}

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		if (!(exception instanceof TDieException)) {

			tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error",
					exception.getMessage());

			tAssertCatcher_1Process(globalMap);
		}

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAssertCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tChronometerStart_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tChronometerStop_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFlowMeterCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_FORMATION_AssertARNContent = new byte[0];
		static byte[] commonByteArray_FORMATION_AssertARNContent = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String language;

		public String getLanguage() {
			return this.language;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		public String substatus;

		public String getSubstatus() {
			return this.substatus;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_AssertARNContent.length) {
					if (length < 1024 && commonByteArray_FORMATION_AssertARNContent.length == 0) {
						commonByteArray_FORMATION_AssertARNContent = new byte[1024];
					} else {
						commonByteArray_FORMATION_AssertARNContent = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_AssertARNContent, 0, length);
				strReturn = new String(commonByteArray_FORMATION_AssertARNContent, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_AssertARNContent) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.language = readString(dis);

					this.origin = readString(dis);

					this.status = readString(dis);

					this.substatus = readString(dis);

					this.description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.language, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.status, dos);

				// String

				writeString(this.substatus, dos);

				// String

				writeString(this.description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",language=" + language);
			sb.append(",origin=" + origin);
			sb.append(",status=" + status);
			sb.append(",substatus=" + substatus);
			sb.append(",description=" + description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tAssertCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tAssertCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File("C:/TEMP/asserts.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					isFileGenerated_tFileOutputDelimited_1 = false;
				}
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("moment");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("pid");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("project");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("job");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("language");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("origin");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("status");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("substatus");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("description");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tAssertCatcher_1 begin ] start
				 */

				ok_Hash.put("tAssertCatcher_1", false);
				start_Hash.put("tAssertCatcher_1", System.currentTimeMillis());

				currentComponent = "tAssertCatcher_1";

				int tos_count_tAssertCatcher_1 = 0;

				for (AssertCatcherUtils.AssertCatcherMessage acm : tAssertCatcher_1.getMessages()) {
					row2.moment = acm.getMoment();
					row2.pid = acm.getPid();
					row2.project = acm.getProject();
					row2.job = acm.getJob();
					row2.language = acm.getLanguage();

					row2.origin = (acm.getOrigin() == null || acm.getOrigin().length() < 1 ? null : acm.getOrigin());

					row2.status = acm.getStatus();
					row2.substatus = acm.getSubstatus();
					row2.description = acm.getDescription();

					/**
					 * [tAssertCatcher_1 begin ] stop
					 */

					/**
					 * [tAssertCatcher_1 main ] start
					 */

					currentComponent = "tAssertCatcher_1";

					tos_count_tAssertCatcher_1++;

					/**
					 * [tAssertCatcher_1 main ] stop
					 */

					/**
					 * [tAssertCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tAssertCatcher_1";

					/**
					 * [tAssertCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 main ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
					}

					StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
					if (row2.moment != null) {
						sb_tFileOutputDelimited_1
								.append(FormatterUtils.format_Date(row2.moment, "yyyy-MM-dd HH:mm:ss"));
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.pid != null) {
						sb_tFileOutputDelimited_1.append(row2.pid);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.project != null) {
						sb_tFileOutputDelimited_1.append(row2.project);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.job != null) {
						sb_tFileOutputDelimited_1.append(row2.job);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.language != null) {
						sb_tFileOutputDelimited_1.append(row2.language);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.origin != null) {
						sb_tFileOutputDelimited_1.append(row2.origin);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.status != null) {
						sb_tFileOutputDelimited_1.append(row2.status);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.substatus != null) {
						sb_tFileOutputDelimited_1.append(row2.substatus);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.description != null) {
						sb_tFileOutputDelimited_1.append(row2.description);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

					nb_line_tFileOutputDelimited_1++;
					resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

					tos_count_tFileOutputDelimited_1++;

					/**
					 * [tFileOutputDelimited_1 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					/**
					 * [tFileOutputDelimited_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					/**
					 * [tFileOutputDelimited_1 process_data_end ] stop
					 */

					/**
					 * [tAssertCatcher_1 process_data_end ] start
					 */

					currentComponent = "tAssertCatcher_1";

					/**
					 * [tAssertCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tAssertCatcher_1 end ] start
					 */

					currentComponent = "tAssertCatcher_1";

				}

				ok_Hash.put("tAssertCatcher_1", true);
				end_Hash.put("tAssertCatcher_1", System.currentTimeMillis());

				/**
				 * [tAssertCatcher_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tAssertCatcher_1 finally ] start
				 */

				currentComponent = "tAssertCatcher_1";

				/**
				 * [tAssertCatcher_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tAssertCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tChronometerStart_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tChronometerStart_1 begin ] start
				 */

				ok_Hash.put("tChronometerStart_1", false);
				start_Hash.put("tChronometerStart_1", System.currentTimeMillis());

				currentComponent = "tChronometerStart_1";

				int tos_count_tChronometerStart_1 = 0;

				Long currentTimetChronometerStart_1 = System.currentTimeMillis();

				globalMap.put("tChronometerStart_1", currentTimetChronometerStart_1);
				globalMap.put("tChronometerStart_1_STARTTIME", currentTimetChronometerStart_1);

				/**
				 * [tChronometerStart_1 begin ] stop
				 */

				/**
				 * [tChronometerStart_1 main ] start
				 */

				currentComponent = "tChronometerStart_1";

				tos_count_tChronometerStart_1++;

				/**
				 * [tChronometerStart_1 main ] stop
				 */

				/**
				 * [tChronometerStart_1 process_data_begin ] start
				 */

				currentComponent = "tChronometerStart_1";

				/**
				 * [tChronometerStart_1 process_data_begin ] stop
				 */

				/**
				 * [tChronometerStart_1 process_data_end ] start
				 */

				currentComponent = "tChronometerStart_1";

				/**
				 * [tChronometerStart_1 process_data_end ] stop
				 */

				/**
				 * [tChronometerStart_1 end ] start
				 */

				currentComponent = "tChronometerStart_1";

				ok_Hash.put("tChronometerStart_1", true);
				end_Hash.put("tChronometerStart_1", System.currentTimeMillis());

				/**
				 * [tChronometerStart_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tChronometerStart_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tChronometerStart_1 finally ] start
				 */

				currentComponent = "tChronometerStart_1";

				/**
				 * [tChronometerStart_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_FORMATION_AssertARNContent = new byte[0];
		static byte[] commonByteArray_FORMATION_AssertARNContent = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id;

		public String getId() {
			return this.id;
		}

		public String id_ex;

		public String getId_ex() {
			return this.id_ex;
		}

		public String siret;

		public String getSiret() {
			return this.siret;
		}

		public String gestion;

		public String getGestion() {
			return this.gestion;
		}

		public java.util.Date date_creat;

		public java.util.Date getDate_creat() {
			return this.date_creat;
		}

		public java.util.Date date_publi;

		public java.util.Date getDate_publi() {
			return this.date_publi;
		}

		public String nature;

		public String getNature() {
			return this.nature;
		}

		public String groupement;

		public String getGroupement() {
			return this.groupement;
		}

		public String titre;

		public String getTitre() {
			return this.titre;
		}

		public String objet;

		public String getObjet() {
			return this.objet;
		}

		public String objet_social1;

		public String getObjet_social1() {
			return this.objet_social1;
		}

		public String objet_social2;

		public String getObjet_social2() {
			return this.objet_social2;
		}

		public String adr1;

		public String getAdr1() {
			return this.adr1;
		}

		public String adr2;

		public String getAdr2() {
			return this.adr2;
		}

		public String adr3;

		public String getAdr3() {
			return this.adr3;
		}

		public String adrs_codepostal;

		public String getAdrs_codepostal() {
			return this.adrs_codepostal;
		}

		public String libcom;

		public String getLibcom() {
			return this.libcom;
		}

		public String adrs_codeinsee;

		public String getAdrs_codeinsee() {
			return this.adrs_codeinsee;
		}

		public String dir_civilite;

		public String getDir_civilite() {
			return this.dir_civilite;
		}

		public String siteweb;

		public String getSiteweb() {
			return this.siteweb;
		}

		public String observation;

		public String getObservation() {
			return this.observation;
		}

		public String position;

		public String getPosition() {
			return this.position;
		}

		public String rup_mi;

		public String getRup_mi() {
			return this.rup_mi;
		}

		public String maj_time;

		public String getMaj_time() {
			return this.maj_time;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.id = this.id;
			other.id_ex = this.id_ex;
			other.siret = this.siret;
			other.gestion = this.gestion;
			other.date_creat = this.date_creat;
			other.date_publi = this.date_publi;
			other.nature = this.nature;
			other.groupement = this.groupement;
			other.titre = this.titre;
			other.objet = this.objet;
			other.objet_social1 = this.objet_social1;
			other.objet_social2 = this.objet_social2;
			other.adr1 = this.adr1;
			other.adr2 = this.adr2;
			other.adr3 = this.adr3;
			other.adrs_codepostal = this.adrs_codepostal;
			other.libcom = this.libcom;
			other.adrs_codeinsee = this.adrs_codeinsee;
			other.dir_civilite = this.dir_civilite;
			other.siteweb = this.siteweb;
			other.observation = this.observation;
			other.position = this.position;
			other.rup_mi = this.rup_mi;
			other.maj_time = this.maj_time;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_AssertARNContent.length) {
					if (length < 1024 && commonByteArray_FORMATION_AssertARNContent.length == 0) {
						commonByteArray_FORMATION_AssertARNContent = new byte[1024];
					} else {
						commonByteArray_FORMATION_AssertARNContent = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_AssertARNContent, 0, length);
				strReturn = new String(commonByteArray_FORMATION_AssertARNContent, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_AssertARNContent) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.id_ex = readString(dis);

					this.siret = readString(dis);

					this.gestion = readString(dis);

					this.date_creat = readDate(dis);

					this.date_publi = readDate(dis);

					this.nature = readString(dis);

					this.groupement = readString(dis);

					this.titre = readString(dis);

					this.objet = readString(dis);

					this.objet_social1 = readString(dis);

					this.objet_social2 = readString(dis);

					this.adr1 = readString(dis);

					this.adr2 = readString(dis);

					this.adr3 = readString(dis);

					this.adrs_codepostal = readString(dis);

					this.libcom = readString(dis);

					this.adrs_codeinsee = readString(dis);

					this.dir_civilite = readString(dis);

					this.siteweb = readString(dis);

					this.observation = readString(dis);

					this.position = readString(dis);

					this.rup_mi = readString(dis);

					this.maj_time = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.id_ex, dos);

				// String

				writeString(this.siret, dos);

				// String

				writeString(this.gestion, dos);

				// java.util.Date

				writeDate(this.date_creat, dos);

				// java.util.Date

				writeDate(this.date_publi, dos);

				// String

				writeString(this.nature, dos);

				// String

				writeString(this.groupement, dos);

				// String

				writeString(this.titre, dos);

				// String

				writeString(this.objet, dos);

				// String

				writeString(this.objet_social1, dos);

				// String

				writeString(this.objet_social2, dos);

				// String

				writeString(this.adr1, dos);

				// String

				writeString(this.adr2, dos);

				// String

				writeString(this.adr3, dos);

				// String

				writeString(this.adrs_codepostal, dos);

				// String

				writeString(this.libcom, dos);

				// String

				writeString(this.adrs_codeinsee, dos);

				// String

				writeString(this.dir_civilite, dos);

				// String

				writeString(this.siteweb, dos);

				// String

				writeString(this.observation, dos);

				// String

				writeString(this.position, dos);

				// String

				writeString(this.rup_mi, dos);

				// String

				writeString(this.maj_time, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",id_ex=" + id_ex);
			sb.append(",siret=" + siret);
			sb.append(",gestion=" + gestion);
			sb.append(",date_creat=" + String.valueOf(date_creat));
			sb.append(",date_publi=" + String.valueOf(date_publi));
			sb.append(",nature=" + nature);
			sb.append(",groupement=" + groupement);
			sb.append(",titre=" + titre);
			sb.append(",objet=" + objet);
			sb.append(",objet_social1=" + objet_social1);
			sb.append(",objet_social2=" + objet_social2);
			sb.append(",adr1=" + adr1);
			sb.append(",adr2=" + adr2);
			sb.append(",adr3=" + adr3);
			sb.append(",adrs_codepostal=" + adrs_codepostal);
			sb.append(",libcom=" + libcom);
			sb.append(",adrs_codeinsee=" + adrs_codeinsee);
			sb.append(",dir_civilite=" + dir_civilite);
			sb.append(",siteweb=" + siteweb);
			sb.append(",observation=" + observation);
			sb.append(",position=" + position);
			sb.append(",rup_mi=" + rup_mi);
			sb.append(",maj_time=" + maj_time);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_FORMATION_AssertARNContent = new byte[0];
		static byte[] commonByteArray_FORMATION_AssertARNContent = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id;

		public String getId() {
			return this.id;
		}

		public String id_ex;

		public String getId_ex() {
			return this.id_ex;
		}

		public String siret;

		public String getSiret() {
			return this.siret;
		}

		public String gestion;

		public String getGestion() {
			return this.gestion;
		}

		public java.util.Date date_creat;

		public java.util.Date getDate_creat() {
			return this.date_creat;
		}

		public java.util.Date date_publi;

		public java.util.Date getDate_publi() {
			return this.date_publi;
		}

		public String nature;

		public String getNature() {
			return this.nature;
		}

		public String groupement;

		public String getGroupement() {
			return this.groupement;
		}

		public String titre;

		public String getTitre() {
			return this.titre;
		}

		public String objet;

		public String getObjet() {
			return this.objet;
		}

		public String objet_social1;

		public String getObjet_social1() {
			return this.objet_social1;
		}

		public String objet_social2;

		public String getObjet_social2() {
			return this.objet_social2;
		}

		public String adr1;

		public String getAdr1() {
			return this.adr1;
		}

		public String adr2;

		public String getAdr2() {
			return this.adr2;
		}

		public String adr3;

		public String getAdr3() {
			return this.adr3;
		}

		public String adrs_codepostal;

		public String getAdrs_codepostal() {
			return this.adrs_codepostal;
		}

		public String libcom;

		public String getLibcom() {
			return this.libcom;
		}

		public String adrs_codeinsee;

		public String getAdrs_codeinsee() {
			return this.adrs_codeinsee;
		}

		public String dir_civilite;

		public String getDir_civilite() {
			return this.dir_civilite;
		}

		public String siteweb;

		public String getSiteweb() {
			return this.siteweb;
		}

		public String observation;

		public String getObservation() {
			return this.observation;
		}

		public String position;

		public String getPosition() {
			return this.position;
		}

		public String rup_mi;

		public String getRup_mi() {
			return this.rup_mi;
		}

		public String maj_time;

		public String getMaj_time() {
			return this.maj_time;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.id = this.id;
			other.id_ex = this.id_ex;
			other.siret = this.siret;
			other.gestion = this.gestion;
			other.date_creat = this.date_creat;
			other.date_publi = this.date_publi;
			other.nature = this.nature;
			other.groupement = this.groupement;
			other.titre = this.titre;
			other.objet = this.objet;
			other.objet_social1 = this.objet_social1;
			other.objet_social2 = this.objet_social2;
			other.adr1 = this.adr1;
			other.adr2 = this.adr2;
			other.adr3 = this.adr3;
			other.adrs_codepostal = this.adrs_codepostal;
			other.libcom = this.libcom;
			other.adrs_codeinsee = this.adrs_codeinsee;
			other.dir_civilite = this.dir_civilite;
			other.siteweb = this.siteweb;
			other.observation = this.observation;
			other.position = this.position;
			other.rup_mi = this.rup_mi;
			other.maj_time = this.maj_time;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_AssertARNContent.length) {
					if (length < 1024 && commonByteArray_FORMATION_AssertARNContent.length == 0) {
						commonByteArray_FORMATION_AssertARNContent = new byte[1024];
					} else {
						commonByteArray_FORMATION_AssertARNContent = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_AssertARNContent, 0, length);
				strReturn = new String(commonByteArray_FORMATION_AssertARNContent, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_AssertARNContent) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.id_ex = readString(dis);

					this.siret = readString(dis);

					this.gestion = readString(dis);

					this.date_creat = readDate(dis);

					this.date_publi = readDate(dis);

					this.nature = readString(dis);

					this.groupement = readString(dis);

					this.titre = readString(dis);

					this.objet = readString(dis);

					this.objet_social1 = readString(dis);

					this.objet_social2 = readString(dis);

					this.adr1 = readString(dis);

					this.adr2 = readString(dis);

					this.adr3 = readString(dis);

					this.adrs_codepostal = readString(dis);

					this.libcom = readString(dis);

					this.adrs_codeinsee = readString(dis);

					this.dir_civilite = readString(dis);

					this.siteweb = readString(dis);

					this.observation = readString(dis);

					this.position = readString(dis);

					this.rup_mi = readString(dis);

					this.maj_time = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.id_ex, dos);

				// String

				writeString(this.siret, dos);

				// String

				writeString(this.gestion, dos);

				// java.util.Date

				writeDate(this.date_creat, dos);

				// java.util.Date

				writeDate(this.date_publi, dos);

				// String

				writeString(this.nature, dos);

				// String

				writeString(this.groupement, dos);

				// String

				writeString(this.titre, dos);

				// String

				writeString(this.objet, dos);

				// String

				writeString(this.objet_social1, dos);

				// String

				writeString(this.objet_social2, dos);

				// String

				writeString(this.adr1, dos);

				// String

				writeString(this.adr2, dos);

				// String

				writeString(this.adr3, dos);

				// String

				writeString(this.adrs_codepostal, dos);

				// String

				writeString(this.libcom, dos);

				// String

				writeString(this.adrs_codeinsee, dos);

				// String

				writeString(this.dir_civilite, dos);

				// String

				writeString(this.siteweb, dos);

				// String

				writeString(this.observation, dos);

				// String

				writeString(this.position, dos);

				// String

				writeString(this.rup_mi, dos);

				// String

				writeString(this.maj_time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",id_ex=" + id_ex);
			sb.append(",siret=" + siret);
			sb.append(",gestion=" + gestion);
			sb.append(",date_creat=" + String.valueOf(date_creat));
			sb.append(",date_publi=" + String.valueOf(date_publi));
			sb.append(",nature=" + nature);
			sb.append(",groupement=" + groupement);
			sb.append(",titre=" + titre);
			sb.append(",objet=" + objet);
			sb.append(",objet_social1=" + objet_social1);
			sb.append(",objet_social2=" + objet_social2);
			sb.append(",adr1=" + adr1);
			sb.append(",adr2=" + adr2);
			sb.append(",adr3=" + adr3);
			sb.append(",adrs_codepostal=" + adrs_codepostal);
			sb.append(",libcom=" + libcom);
			sb.append(",adrs_codeinsee=" + adrs_codeinsee);
			sb.append(",dir_civilite=" + dir_civilite);
			sb.append(",siteweb=" + siteweb);
			sb.append(",observation=" + observation);
			sb.append(",position=" + position);
			sb.append(",rup_mi=" + rup_mi);
			sb.append(",maj_time=" + maj_time);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row51Struct implements routines.system.IPersistableRow<row51Struct> {
		final static byte[] commonByteArrayLock_FORMATION_AssertARNContent = new byte[0];
		static byte[] commonByteArray_FORMATION_AssertARNContent = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id;

		public String getId() {
			return this.id;
		}

		public String id_ex;

		public String getId_ex() {
			return this.id_ex;
		}

		public String siret;

		public String getSiret() {
			return this.siret;
		}

		public String gestion;

		public String getGestion() {
			return this.gestion;
		}

		public java.util.Date date_creat;

		public java.util.Date getDate_creat() {
			return this.date_creat;
		}

		public java.util.Date date_publi;

		public java.util.Date getDate_publi() {
			return this.date_publi;
		}

		public String nature;

		public String getNature() {
			return this.nature;
		}

		public String groupement;

		public String getGroupement() {
			return this.groupement;
		}

		public String titre;

		public String getTitre() {
			return this.titre;
		}

		public String objet;

		public String getObjet() {
			return this.objet;
		}

		public String objet_social1;

		public String getObjet_social1() {
			return this.objet_social1;
		}

		public String objet_social2;

		public String getObjet_social2() {
			return this.objet_social2;
		}

		public String adr1;

		public String getAdr1() {
			return this.adr1;
		}

		public String adr2;

		public String getAdr2() {
			return this.adr2;
		}

		public String adr3;

		public String getAdr3() {
			return this.adr3;
		}

		public String adrs_codepostal;

		public String getAdrs_codepostal() {
			return this.adrs_codepostal;
		}

		public String libcom;

		public String getLibcom() {
			return this.libcom;
		}

		public String adrs_codeinsee;

		public String getAdrs_codeinsee() {
			return this.adrs_codeinsee;
		}

		public String dir_civilite;

		public String getDir_civilite() {
			return this.dir_civilite;
		}

		public String siteweb;

		public String getSiteweb() {
			return this.siteweb;
		}

		public String observation;

		public String getObservation() {
			return this.observation;
		}

		public String position;

		public String getPosition() {
			return this.position;
		}

		public String rup_mi;

		public String getRup_mi() {
			return this.rup_mi;
		}

		public String maj_time;

		public String getMaj_time() {
			return this.maj_time;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row51Struct other = (row51Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(row51Struct other) {

			other.id = this.id;
			other.id_ex = this.id_ex;
			other.siret = this.siret;
			other.gestion = this.gestion;
			other.date_creat = this.date_creat;
			other.date_publi = this.date_publi;
			other.nature = this.nature;
			other.groupement = this.groupement;
			other.titre = this.titre;
			other.objet = this.objet;
			other.objet_social1 = this.objet_social1;
			other.objet_social2 = this.objet_social2;
			other.adr1 = this.adr1;
			other.adr2 = this.adr2;
			other.adr3 = this.adr3;
			other.adrs_codepostal = this.adrs_codepostal;
			other.libcom = this.libcom;
			other.adrs_codeinsee = this.adrs_codeinsee;
			other.dir_civilite = this.dir_civilite;
			other.siteweb = this.siteweb;
			other.observation = this.observation;
			other.position = this.position;
			other.rup_mi = this.rup_mi;
			other.maj_time = this.maj_time;
			other.errorMessage = this.errorMessage;

		}

		public void copyKeysDataTo(row51Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_AssertARNContent.length) {
					if (length < 1024 && commonByteArray_FORMATION_AssertARNContent.length == 0) {
						commonByteArray_FORMATION_AssertARNContent = new byte[1024];
					} else {
						commonByteArray_FORMATION_AssertARNContent = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_AssertARNContent, 0, length);
				strReturn = new String(commonByteArray_FORMATION_AssertARNContent, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_AssertARNContent) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.id_ex = readString(dis);

					this.siret = readString(dis);

					this.gestion = readString(dis);

					this.date_creat = readDate(dis);

					this.date_publi = readDate(dis);

					this.nature = readString(dis);

					this.groupement = readString(dis);

					this.titre = readString(dis);

					this.objet = readString(dis);

					this.objet_social1 = readString(dis);

					this.objet_social2 = readString(dis);

					this.adr1 = readString(dis);

					this.adr2 = readString(dis);

					this.adr3 = readString(dis);

					this.adrs_codepostal = readString(dis);

					this.libcom = readString(dis);

					this.adrs_codeinsee = readString(dis);

					this.dir_civilite = readString(dis);

					this.siteweb = readString(dis);

					this.observation = readString(dis);

					this.position = readString(dis);

					this.rup_mi = readString(dis);

					this.maj_time = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.id_ex, dos);

				// String

				writeString(this.siret, dos);

				// String

				writeString(this.gestion, dos);

				// java.util.Date

				writeDate(this.date_creat, dos);

				// java.util.Date

				writeDate(this.date_publi, dos);

				// String

				writeString(this.nature, dos);

				// String

				writeString(this.groupement, dos);

				// String

				writeString(this.titre, dos);

				// String

				writeString(this.objet, dos);

				// String

				writeString(this.objet_social1, dos);

				// String

				writeString(this.objet_social2, dos);

				// String

				writeString(this.adr1, dos);

				// String

				writeString(this.adr2, dos);

				// String

				writeString(this.adr3, dos);

				// String

				writeString(this.adrs_codepostal, dos);

				// String

				writeString(this.libcom, dos);

				// String

				writeString(this.adrs_codeinsee, dos);

				// String

				writeString(this.dir_civilite, dos);

				// String

				writeString(this.siteweb, dos);

				// String

				writeString(this.observation, dos);

				// String

				writeString(this.position, dos);

				// String

				writeString(this.rup_mi, dos);

				// String

				writeString(this.maj_time, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",id_ex=" + id_ex);
			sb.append(",siret=" + siret);
			sb.append(",gestion=" + gestion);
			sb.append(",date_creat=" + String.valueOf(date_creat));
			sb.append(",date_publi=" + String.valueOf(date_publi));
			sb.append(",nature=" + nature);
			sb.append(",groupement=" + groupement);
			sb.append(",titre=" + titre);
			sb.append(",objet=" + objet);
			sb.append(",objet_social1=" + objet_social1);
			sb.append(",objet_social2=" + objet_social2);
			sb.append(",adr1=" + adr1);
			sb.append(",adr2=" + adr2);
			sb.append(",adr3=" + adr3);
			sb.append(",adrs_codepostal=" + adrs_codepostal);
			sb.append(",libcom=" + libcom);
			sb.append(",adrs_codeinsee=" + adrs_codeinsee);
			sb.append(",dir_civilite=" + dir_civilite);
			sb.append(",siteweb=" + siteweb);
			sb.append(",observation=" + observation);
			sb.append(",position=" + position);
			sb.append(",rup_mi=" + rup_mi);
			sb.append(",maj_time=" + maj_time);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row51Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_FORMATION_AssertARNContent = new byte[0];
		static byte[] commonByteArray_FORMATION_AssertARNContent = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id;

		public String getId() {
			return this.id;
		}

		public String id_ex;

		public String getId_ex() {
			return this.id_ex;
		}

		public String siret;

		public String getSiret() {
			return this.siret;
		}

		public String gestion;

		public String getGestion() {
			return this.gestion;
		}

		public java.util.Date date_creat;

		public java.util.Date getDate_creat() {
			return this.date_creat;
		}

		public java.util.Date date_publi;

		public java.util.Date getDate_publi() {
			return this.date_publi;
		}

		public String nature;

		public String getNature() {
			return this.nature;
		}

		public String groupement;

		public String getGroupement() {
			return this.groupement;
		}

		public String titre;

		public String getTitre() {
			return this.titre;
		}

		public String objet;

		public String getObjet() {
			return this.objet;
		}

		public String objet_social1;

		public String getObjet_social1() {
			return this.objet_social1;
		}

		public String objet_social2;

		public String getObjet_social2() {
			return this.objet_social2;
		}

		public String adr1;

		public String getAdr1() {
			return this.adr1;
		}

		public String adr2;

		public String getAdr2() {
			return this.adr2;
		}

		public String adr3;

		public String getAdr3() {
			return this.adr3;
		}

		public String adrs_codepostal;

		public String getAdrs_codepostal() {
			return this.adrs_codepostal;
		}

		public String libcom;

		public String getLibcom() {
			return this.libcom;
		}

		public String adrs_codeinsee;

		public String getAdrs_codeinsee() {
			return this.adrs_codeinsee;
		}

		public String dir_civilite;

		public String getDir_civilite() {
			return this.dir_civilite;
		}

		public String siteweb;

		public String getSiteweb() {
			return this.siteweb;
		}

		public String observation;

		public String getObservation() {
			return this.observation;
		}

		public String position;

		public String getPosition() {
			return this.position;
		}

		public String rup_mi;

		public String getRup_mi() {
			return this.rup_mi;
		}

		public String maj_time;

		public String getMaj_time() {
			return this.maj_time;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.id = this.id;
			other.id_ex = this.id_ex;
			other.siret = this.siret;
			other.gestion = this.gestion;
			other.date_creat = this.date_creat;
			other.date_publi = this.date_publi;
			other.nature = this.nature;
			other.groupement = this.groupement;
			other.titre = this.titre;
			other.objet = this.objet;
			other.objet_social1 = this.objet_social1;
			other.objet_social2 = this.objet_social2;
			other.adr1 = this.adr1;
			other.adr2 = this.adr2;
			other.adr3 = this.adr3;
			other.adrs_codepostal = this.adrs_codepostal;
			other.libcom = this.libcom;
			other.adrs_codeinsee = this.adrs_codeinsee;
			other.dir_civilite = this.dir_civilite;
			other.siteweb = this.siteweb;
			other.observation = this.observation;
			other.position = this.position;
			other.rup_mi = this.rup_mi;
			other.maj_time = this.maj_time;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_AssertARNContent.length) {
					if (length < 1024 && commonByteArray_FORMATION_AssertARNContent.length == 0) {
						commonByteArray_FORMATION_AssertARNContent = new byte[1024];
					} else {
						commonByteArray_FORMATION_AssertARNContent = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_AssertARNContent, 0, length);
				strReturn = new String(commonByteArray_FORMATION_AssertARNContent, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_AssertARNContent) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.id_ex = readString(dis);

					this.siret = readString(dis);

					this.gestion = readString(dis);

					this.date_creat = readDate(dis);

					this.date_publi = readDate(dis);

					this.nature = readString(dis);

					this.groupement = readString(dis);

					this.titre = readString(dis);

					this.objet = readString(dis);

					this.objet_social1 = readString(dis);

					this.objet_social2 = readString(dis);

					this.adr1 = readString(dis);

					this.adr2 = readString(dis);

					this.adr3 = readString(dis);

					this.adrs_codepostal = readString(dis);

					this.libcom = readString(dis);

					this.adrs_codeinsee = readString(dis);

					this.dir_civilite = readString(dis);

					this.siteweb = readString(dis);

					this.observation = readString(dis);

					this.position = readString(dis);

					this.rup_mi = readString(dis);

					this.maj_time = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.id_ex, dos);

				// String

				writeString(this.siret, dos);

				// String

				writeString(this.gestion, dos);

				// java.util.Date

				writeDate(this.date_creat, dos);

				// java.util.Date

				writeDate(this.date_publi, dos);

				// String

				writeString(this.nature, dos);

				// String

				writeString(this.groupement, dos);

				// String

				writeString(this.titre, dos);

				// String

				writeString(this.objet, dos);

				// String

				writeString(this.objet_social1, dos);

				// String

				writeString(this.objet_social2, dos);

				// String

				writeString(this.adr1, dos);

				// String

				writeString(this.adr2, dos);

				// String

				writeString(this.adr3, dos);

				// String

				writeString(this.adrs_codepostal, dos);

				// String

				writeString(this.libcom, dos);

				// String

				writeString(this.adrs_codeinsee, dos);

				// String

				writeString(this.dir_civilite, dos);

				// String

				writeString(this.siteweb, dos);

				// String

				writeString(this.observation, dos);

				// String

				writeString(this.position, dos);

				// String

				writeString(this.rup_mi, dos);

				// String

				writeString(this.maj_time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",id_ex=" + id_ex);
			sb.append(",siret=" + siret);
			sb.append(",gestion=" + gestion);
			sb.append(",date_creat=" + String.valueOf(date_creat));
			sb.append(",date_publi=" + String.valueOf(date_publi));
			sb.append(",nature=" + nature);
			sb.append(",groupement=" + groupement);
			sb.append(",titre=" + titre);
			sb.append(",objet=" + objet);
			sb.append(",objet_social1=" + objet_social1);
			sb.append(",objet_social2=" + objet_social2);
			sb.append(",adr1=" + adr1);
			sb.append(",adr2=" + adr2);
			sb.append(",adr3=" + adr3);
			sb.append(",adrs_codepostal=" + adrs_codepostal);
			sb.append(",libcom=" + libcom);
			sb.append(",adrs_codeinsee=" + adrs_codeinsee);
			sb.append(",dir_civilite=" + dir_civilite);
			sb.append(",siteweb=" + siteweb);
			sb.append(",observation=" + observation);
			sb.append(",position=" + position);
			sb.append(",rup_mi=" + rup_mi);
			sb.append(",maj_time=" + maj_time);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_FORMATION_AssertARNContent = new byte[0];
		static byte[] commonByteArray_FORMATION_AssertARNContent = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id;

		public String getId() {
			return this.id;
		}

		public String id_ex;

		public String getId_ex() {
			return this.id_ex;
		}

		public String siret;

		public String getSiret() {
			return this.siret;
		}

		public String gestion;

		public String getGestion() {
			return this.gestion;
		}

		public java.util.Date date_creat;

		public java.util.Date getDate_creat() {
			return this.date_creat;
		}

		public java.util.Date date_publi;

		public java.util.Date getDate_publi() {
			return this.date_publi;
		}

		public String nature;

		public String getNature() {
			return this.nature;
		}

		public String groupement;

		public String getGroupement() {
			return this.groupement;
		}

		public String titre;

		public String getTitre() {
			return this.titre;
		}

		public String objet;

		public String getObjet() {
			return this.objet;
		}

		public String objet_social1;

		public String getObjet_social1() {
			return this.objet_social1;
		}

		public String objet_social2;

		public String getObjet_social2() {
			return this.objet_social2;
		}

		public String adr1;

		public String getAdr1() {
			return this.adr1;
		}

		public String adr2;

		public String getAdr2() {
			return this.adr2;
		}

		public String adr3;

		public String getAdr3() {
			return this.adr3;
		}

		public String adrs_codepostal;

		public String getAdrs_codepostal() {
			return this.adrs_codepostal;
		}

		public String libcom;

		public String getLibcom() {
			return this.libcom;
		}

		public String adrs_codeinsee;

		public String getAdrs_codeinsee() {
			return this.adrs_codeinsee;
		}

		public String dir_civilite;

		public String getDir_civilite() {
			return this.dir_civilite;
		}

		public String siteweb;

		public String getSiteweb() {
			return this.siteweb;
		}

		public String observation;

		public String getObservation() {
			return this.observation;
		}

		public String position;

		public String getPosition() {
			return this.position;
		}

		public String rup_mi;

		public String getRup_mi() {
			return this.rup_mi;
		}

		public String maj_time;

		public String getMaj_time() {
			return this.maj_time;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.id = this.id;
			other.id_ex = this.id_ex;
			other.siret = this.siret;
			other.gestion = this.gestion;
			other.date_creat = this.date_creat;
			other.date_publi = this.date_publi;
			other.nature = this.nature;
			other.groupement = this.groupement;
			other.titre = this.titre;
			other.objet = this.objet;
			other.objet_social1 = this.objet_social1;
			other.objet_social2 = this.objet_social2;
			other.adr1 = this.adr1;
			other.adr2 = this.adr2;
			other.adr3 = this.adr3;
			other.adrs_codepostal = this.adrs_codepostal;
			other.libcom = this.libcom;
			other.adrs_codeinsee = this.adrs_codeinsee;
			other.dir_civilite = this.dir_civilite;
			other.siteweb = this.siteweb;
			other.observation = this.observation;
			other.position = this.position;
			other.rup_mi = this.rup_mi;
			other.maj_time = this.maj_time;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_AssertARNContent.length) {
					if (length < 1024 && commonByteArray_FORMATION_AssertARNContent.length == 0) {
						commonByteArray_FORMATION_AssertARNContent = new byte[1024];
					} else {
						commonByteArray_FORMATION_AssertARNContent = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_AssertARNContent, 0, length);
				strReturn = new String(commonByteArray_FORMATION_AssertARNContent, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_AssertARNContent) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.id_ex = readString(dis);

					this.siret = readString(dis);

					this.gestion = readString(dis);

					this.date_creat = readDate(dis);

					this.date_publi = readDate(dis);

					this.nature = readString(dis);

					this.groupement = readString(dis);

					this.titre = readString(dis);

					this.objet = readString(dis);

					this.objet_social1 = readString(dis);

					this.objet_social2 = readString(dis);

					this.adr1 = readString(dis);

					this.adr2 = readString(dis);

					this.adr3 = readString(dis);

					this.adrs_codepostal = readString(dis);

					this.libcom = readString(dis);

					this.adrs_codeinsee = readString(dis);

					this.dir_civilite = readString(dis);

					this.siteweb = readString(dis);

					this.observation = readString(dis);

					this.position = readString(dis);

					this.rup_mi = readString(dis);

					this.maj_time = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.id_ex, dos);

				// String

				writeString(this.siret, dos);

				// String

				writeString(this.gestion, dos);

				// java.util.Date

				writeDate(this.date_creat, dos);

				// java.util.Date

				writeDate(this.date_publi, dos);

				// String

				writeString(this.nature, dos);

				// String

				writeString(this.groupement, dos);

				// String

				writeString(this.titre, dos);

				// String

				writeString(this.objet, dos);

				// String

				writeString(this.objet_social1, dos);

				// String

				writeString(this.objet_social2, dos);

				// String

				writeString(this.adr1, dos);

				// String

				writeString(this.adr2, dos);

				// String

				writeString(this.adr3, dos);

				// String

				writeString(this.adrs_codepostal, dos);

				// String

				writeString(this.libcom, dos);

				// String

				writeString(this.adrs_codeinsee, dos);

				// String

				writeString(this.dir_civilite, dos);

				// String

				writeString(this.siteweb, dos);

				// String

				writeString(this.observation, dos);

				// String

				writeString(this.position, dos);

				// String

				writeString(this.rup_mi, dos);

				// String

				writeString(this.maj_time, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",id_ex=" + id_ex);
			sb.append(",siret=" + siret);
			sb.append(",gestion=" + gestion);
			sb.append(",date_creat=" + String.valueOf(date_creat));
			sb.append(",date_publi=" + String.valueOf(date_publi));
			sb.append(",nature=" + nature);
			sb.append(",groupement=" + groupement);
			sb.append(",titre=" + titre);
			sb.append(",objet=" + objet);
			sb.append(",objet_social1=" + objet_social1);
			sb.append(",objet_social2=" + objet_social2);
			sb.append(",adr1=" + adr1);
			sb.append(",adr2=" + adr2);
			sb.append(",adr3=" + adr3);
			sb.append(",adrs_codepostal=" + adrs_codepostal);
			sb.append(",libcom=" + libcom);
			sb.append(",adrs_codeinsee=" + adrs_codeinsee);
			sb.append(",dir_civilite=" + dir_civilite);
			sb.append(",siteweb=" + siteweb);
			sb.append(",observation=" + observation);
			sb.append(",position=" + position);
			sb.append(",rup_mi=" + rup_mi);
			sb.append(",maj_time=" + maj_time);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row1Struct row4 = row1;
				row5Struct row5 = new row5Struct();
				row51Struct row51 = new row51Struct();
				row51Struct row6 = row51;

				/**
				 * [tFileOutputXML_1 begin ] start
				 */

				ok_Hash.put("tFileOutputXML_1", false);
				start_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				currentComponent = "tFileOutputXML_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tFileOutputXML_1 = 0;

				String originalFileName_tFileOutputXML_1 = "C:/TEMP/out.xml";
				java.io.File originalFile_tFileOutputXML_1 = new java.io.File(originalFileName_tFileOutputXML_1);

				String fileName_tFileOutputXML_1 = originalFileName_tFileOutputXML_1;
				java.io.File file_tFileOutputXML_1 = new java.io.File(fileName_tFileOutputXML_1);
				if (!file_tFileOutputXML_1.isAbsolute()) {
					file_tFileOutputXML_1 = file_tFileOutputXML_1.getCanonicalFile();
				}

				String[] headers_tFileOutputXML_1 = new String[2];

				headers_tFileOutputXML_1[0] = "<?xml version=\"1.0\" encoding=\"" + "ISO-8859-15" + "\"?>";

				String[] footers_tFileOutputXML_1 = new String[1];

				headers_tFileOutputXML_1[1] = "<" + "arns" + ">";

				footers_tFileOutputXML_1[0] = "</" + "arns" + ">";

				int nb_line_tFileOutputXML_1 = 0;

				java.io.BufferedWriter out_tFileOutputXML_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(file_tFileOutputXML_1), "ISO-8859-15"));

				out_tFileOutputXML_1.write(headers_tFileOutputXML_1[0]);
				out_tFileOutputXML_1.newLine();
				out_tFileOutputXML_1.write(headers_tFileOutputXML_1[1]);
				out_tFileOutputXML_1.newLine();

				/**
				 * [tFileOutputXML_1 begin ] stop
				 */

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());

				currentComponent = "tLogRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tLogRow_4 = 0;

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tFileOutputXML_2 begin ] start
				 */

				ok_Hash.put("tFileOutputXML_2", false);
				start_Hash.put("tFileOutputXML_2", System.currentTimeMillis());

				currentComponent = "tFileOutputXML_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tFileOutputXML_2 = 0;

				String originalFileName_tFileOutputXML_2 = "C:/TEMP/rejects.xml";
				java.io.File originalFile_tFileOutputXML_2 = new java.io.File(originalFileName_tFileOutputXML_2);

				String fileName_tFileOutputXML_2 = originalFileName_tFileOutputXML_2;
				java.io.File file_tFileOutputXML_2 = new java.io.File(fileName_tFileOutputXML_2);
				if (!file_tFileOutputXML_2.isAbsolute()) {
					file_tFileOutputXML_2 = file_tFileOutputXML_2.getCanonicalFile();
				}

				// create directory only if not exists

				file_tFileOutputXML_2.getParentFile().mkdirs();

				String[] headers_tFileOutputXML_2 = new String[2];

				headers_tFileOutputXML_2[0] = "<?xml version=\"1.0\" encoding=\"" + "ISO-8859-15" + "\"?>";

				String[] footers_tFileOutputXML_2 = new String[1];

				headers_tFileOutputXML_2[1] = "<" + "arns" + ">";

				footers_tFileOutputXML_2[0] = "</" + "arns" + ">";

				int nb_line_tFileOutputXML_2 = 0;

				java.io.BufferedWriter out_tFileOutputXML_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(file_tFileOutputXML_2), "ISO-8859-15"));

				out_tFileOutputXML_2.write(headers_tFileOutputXML_2[0]);
				out_tFileOutputXML_2.newLine();
				out_tFileOutputXML_2.write(headers_tFileOutputXML_2[1]);
				out_tFileOutputXML_2.newLine();

				/**
				 * [tFileOutputXML_2 begin ] stop
				 */

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row51");
				}

				int tos_count_tLogRow_3 = 0;

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tAssert_1 begin ] start
				 */

				ok_Hash.put("tAssert_1", false);
				start_Hash.put("tAssert_1", System.currentTimeMillis());

				currentComponent = "tAssert_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "meterRowrow1");
				}

				int tos_count_tAssert_1 = 0;

				/**
				 * [tAssert_1 begin ] stop
				 */

				/**
				 * [vFlowMeter_row1 begin ] start
				 */

				ok_Hash.put("vFlowMeter_row1", false);
				start_Hash.put("vFlowMeter_row1", System.currentTimeMillis());

				currentComponent = "vFlowMeter_row1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_vFlowMeter_row1 = 0;

				int count_vFlowMeter_row1 = 0;

				/**
				 * [vFlowMeter_row1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
						context.ARN_DIR
								+ "/rna_import_20200501_dpt_01.csv"/** End field tFileInputDelimited_1:FILENAME */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),
											"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
								if (!(rowtFileInputDelimited_1.length == 1
										&& ("\015").equals(rowtFileInputDelimited_1[0]))) {// empty line when row
																							// separator is '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
											: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
										? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(new java.io.InputStreamReader(
												new java.io.FileInputStream(
														String.valueOf(filename_tFileInputDelimited_1)),
												"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

						if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																													// line
																													// when
																													// row
																													// separator
																													// is
																													// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row1.id = null;

								row1.id_ex = null;

								row1.siret = null;

								row1.gestion = null;

								row1.date_creat = null;

								row1.date_publi = null;

								row1.nature = null;

								row1.groupement = null;

								row1.titre = null;

								row1.objet = null;

								row1.objet_social1 = null;

								row1.objet_social2 = null;

								row1.adr1 = null;

								row1.adr2 = null;

								row1.adr3 = null;

								row1.adrs_codepostal = null;

								row1.libcom = null;

								row1.adrs_codeinsee = null;

								row1.dir_civilite = null;

								row1.siteweb = null;

								row1.observation = null;

								row1.position = null;

								row1.rup_mi = null;

								row1.maj_time = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.id = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.id = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.id_ex = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.id_ex = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.siret = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.siret = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.gestion = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.gestion = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.date_creat = ParserUtils.parseTo_Date(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
													"yyyy-MM-dd");

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"date_creat", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.date_creat = null;

									}

								} else {

									row1.date_creat = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.date_publi = ParserUtils.parseTo_Date(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
													"yyyy-MM-dd");

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"date_publi", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.date_publi = null;

									}

								} else {

									row1.date_publi = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.nature = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.nature = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.groupement = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.groupement = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.titre = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.titre = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.objet = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.objet = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.objet_social1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.objet_social1 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.objet_social2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.objet_social2 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.adr1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.adr1 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.adr2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.adr2 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.adr3 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.adr3 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.adrs_codepostal = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.adrs_codepostal = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.libcom = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.libcom = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 17;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.adrs_codeinsee = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.adrs_codeinsee = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 18;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.dir_civilite = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.dir_civilite = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 19;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.siteweb = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.siteweb = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 20;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.observation = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.observation = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 21;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.position = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.position = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 22;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.rup_mi = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.rup_mi = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 23;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.maj_time = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.maj_time = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [vFlowMeter_row1 main ] start
							 */

							currentComponent = "vFlowMeter_row1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							count_vFlowMeter_row1++;

							tos_count_vFlowMeter_row1++;

							/**
							 * [vFlowMeter_row1 main ] stop
							 */

							/**
							 * [vFlowMeter_row1 process_data_begin ] start
							 */

							currentComponent = "vFlowMeter_row1";

							/**
							 * [vFlowMeter_row1 process_data_begin ] stop
							 */

							/**
							 * [tAssert_1 main ] start
							 */

							currentComponent = "tAssert_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "meterRowrow1");
							}

							if (row1.adrs_codepostal == "") {
								tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", "tAssert_1", "Ok", "--",
										"Pas de code postal: " + row1.id);
								tAssertCatcher_1Process(globalMap);
							} else {
								tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", "tAssert_1", "Failed",
										"Test logically failed", "Pas de code postal: " + row1.id);
								tAssertCatcher_1Process(globalMap);
							}

							row4 = row1;

							tos_count_tAssert_1++;

							/**
							 * [tAssert_1 main ] stop
							 */

							/**
							 * [tAssert_1 process_data_begin ] start
							 */

							currentComponent = "tAssert_1";

							/**
							 * [tAssert_1 process_data_begin ] stop
							 */

							/**
							 * [tFilterRow_1 main ] start
							 */

							currentComponent = "tFilterRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
							}

							row51 = null;
							row5 = null;
							Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
							ope_tFilterRow_1.matches((// code sample : use row4 to define the condition.
// row4.columnName1.equals("foo") ||!(row4.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
							!("0001-01-01".equals(TalendDate.formatDate("yyyy-MM-dd", row4.date_publi))
									&& "0001-01-01".equals(TalendDate.formatDate("yyyy-MM-dd", row4.date_creat)))),
									"advanced condition failed");

							if (ope_tFilterRow_1.getMatchFlag()) {
								if (row5 == null) {
									row5 = new row5Struct();
								}
								row5.id = row4.id;
								row5.id_ex = row4.id_ex;
								row5.siret = row4.siret;
								row5.gestion = row4.gestion;
								row5.date_creat = row4.date_creat;
								row5.date_publi = row4.date_publi;
								row5.nature = row4.nature;
								row5.groupement = row4.groupement;
								row5.titre = row4.titre;
								row5.objet = row4.objet;
								row5.objet_social1 = row4.objet_social1;
								row5.objet_social2 = row4.objet_social2;
								row5.adr1 = row4.adr1;
								row5.adr2 = row4.adr2;
								row5.adr3 = row4.adr3;
								row5.adrs_codepostal = row4.adrs_codepostal;
								row5.libcom = row4.libcom;
								row5.adrs_codeinsee = row4.adrs_codeinsee;
								row5.dir_civilite = row4.dir_civilite;
								row5.siteweb = row4.siteweb;
								row5.observation = row4.observation;
								row5.position = row4.position;
								row5.rup_mi = row4.rup_mi;
								row5.maj_time = row4.maj_time;
								nb_line_ok_tFilterRow_1++;
							} else {
								if (row51 == null) {
									row51 = new row51Struct();
								}
								row51.id = row4.id;
								row51.id_ex = row4.id_ex;
								row51.siret = row4.siret;
								row51.gestion = row4.gestion;
								row51.date_creat = row4.date_creat;
								row51.date_publi = row4.date_publi;
								row51.nature = row4.nature;
								row51.groupement = row4.groupement;
								row51.titre = row4.titre;
								row51.objet = row4.objet;
								row51.objet_social1 = row4.objet_social1;
								row51.objet_social2 = row4.objet_social2;
								row51.adr1 = row4.adr1;
								row51.adr2 = row4.adr2;
								row51.adr3 = row4.adr3;
								row51.adrs_codepostal = row4.adrs_codepostal;
								row51.libcom = row4.libcom;
								row51.adrs_codeinsee = row4.adrs_codeinsee;
								row51.dir_civilite = row4.dir_civilite;
								row51.siteweb = row4.siteweb;
								row51.observation = row4.observation;
								row51.position = row4.position;
								row51.rup_mi = row4.rup_mi;
								row51.maj_time = row4.maj_time;
								row51.errorMessage = ope_tFilterRow_1.getErrorMsg();
								nb_line_reject_tFilterRow_1++;
							}

							nb_line_tFilterRow_1++;

							tos_count_tFilterRow_1++;

							/**
							 * [tFilterRow_1 main ] stop
							 */

							/**
							 * [tFilterRow_1 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_begin ] stop
							 */
// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tLogRow_4 main ] start
								 */

								currentComponent = "tLogRow_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
								}

								tos_count_tLogRow_4++;

								/**
								 * [tLogRow_4 main ] stop
								 */

								/**
								 * [tLogRow_4 process_data_begin ] start
								 */

								currentComponent = "tLogRow_4";

								/**
								 * [tLogRow_4 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputXML_1 main ] start
								 */

								currentComponent = "tFileOutputXML_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
								}

								StringBuilder tempRes_tFileOutputXML_1 = new StringBuilder("<" + "arn");
								tempRes_tFileOutputXML_1.append(" " + "id" + "=\""
										+ ((row5.id == null) ? "" : (TalendString.replaceSpecialCharForXML(row5.id)))
										+ "\"");
								tempRes_tFileOutputXML_1.append(" " + "id_ex" + "=\"" + ((row5.id_ex == null) ? ""
										: (TalendString.replaceSpecialCharForXML(row5.id_ex))) + "\"");
								tempRes_tFileOutputXML_1.append(">");
								out_tFileOutputXML_1.write(tempRes_tFileOutputXML_1.toString());

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "siret" + ">"
										+ ((row5.siret == null) ? "" : (TalendString.checkCDATAForXML(row5.siret)))
										+ "</" + "siret" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "gestion" + ">"
										+ ((row5.gestion == null) ? "" : (TalendString.checkCDATAForXML(row5.gestion)))
										+ "</" + "gestion" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "date_creat" + ">"
										+ ((row5.date_creat == null) ? ""
												: (TalendString.checkCDATAForXML(
														FormatterUtils.format_Date(row5.date_creat, "yyyy-MM-dd"))))
										+ "</" + "date_creat" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "date_publi" + ">"
										+ ((row5.date_publi == null) ? ""
												: (TalendString.checkCDATAForXML(
														FormatterUtils.format_Date(row5.date_publi, "yyyy-MM-dd"))))
										+ "</" + "date_publi" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "nature" + ">"
										+ ((row5.nature == null) ? "" : (TalendString.checkCDATAForXML(row5.nature)))
										+ "</" + "nature" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "groupement" + ">"
										+ ((row5.groupement == null) ? ""
												: (TalendString.checkCDATAForXML(row5.groupement)))
										+ "</" + "groupement" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "titre" + ">"
										+ ((row5.titre == null) ? "" : (TalendString.checkCDATAForXML(row5.titre)))
										+ "</" + "titre" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "objet" + ">"
										+ ((row5.objet == null) ? "" : (TalendString.checkCDATAForXML(row5.objet)))
										+ "</" + "objet" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "objet_social1" + ">"
										+ ((row5.objet_social1 == null) ? ""
												: (TalendString.checkCDATAForXML(row5.objet_social1)))
										+ "</" + "objet_social1" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "objet_social2" + ">"
										+ ((row5.objet_social2 == null) ? ""
												: (TalendString.checkCDATAForXML(row5.objet_social2)))
										+ "</" + "objet_social2" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "adr1" + ">"
										+ ((row5.adr1 == null) ? "" : (TalendString.checkCDATAForXML(row5.adr1))) + "</"
										+ "adr1" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "adr2" + ">"
										+ ((row5.adr2 == null) ? "" : (TalendString.checkCDATAForXML(row5.adr2))) + "</"
										+ "adr2" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "adr3" + ">"
										+ ((row5.adr3 == null) ? "" : (TalendString.checkCDATAForXML(row5.adr3))) + "</"
										+ "adr3" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "adrs_codepostal" + ">"
										+ ((row5.adrs_codepostal == null) ? ""
												: (TalendString.checkCDATAForXML(row5.adrs_codepostal)))
										+ "</" + "adrs_codepostal" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "libcom" + ">"
										+ ((row5.libcom == null) ? "" : (TalendString.checkCDATAForXML(row5.libcom)))
										+ "</" + "libcom" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "adrs_codeinsee" + ">"
										+ ((row5.adrs_codeinsee == null) ? ""
												: (TalendString.checkCDATAForXML(row5.adrs_codeinsee)))
										+ "</" + "adrs_codeinsee" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "dir_civilite" + ">"
										+ ((row5.dir_civilite == null) ? ""
												: (TalendString.checkCDATAForXML(row5.dir_civilite)))
										+ "</" + "dir_civilite" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "siteweb" + ">"
										+ ((row5.siteweb == null) ? "" : (TalendString.checkCDATAForXML(row5.siteweb)))
										+ "</" + "siteweb" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "observation" + ">"
										+ ((row5.observation == null) ? ""
												: (TalendString.checkCDATAForXML(row5.observation)))
										+ "</" + "observation" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "position" + ">"
										+ ((row5.position == null) ? ""
												: (TalendString.checkCDATAForXML(row5.position)))
										+ "</" + "position" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "rup_mi" + ">"
										+ ((row5.rup_mi == null) ? "" : (TalendString.checkCDATAForXML(row5.rup_mi)))
										+ "</" + "rup_mi" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "maj_time" + ">"
										+ ((row5.maj_time == null) ? ""
												: (TalendString.checkCDATAForXML(row5.maj_time)))
										+ "</" + "maj_time" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("</" + "arn" + ">");

								out_tFileOutputXML_1.newLine();

								nb_line_tFileOutputXML_1++;

								tos_count_tFileOutputXML_1++;

								/**
								 * [tFileOutputXML_1 main ] stop
								 */

								/**
								 * [tFileOutputXML_1 process_data_begin ] start
								 */

								currentComponent = "tFileOutputXML_1";

								/**
								 * [tFileOutputXML_1 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputXML_1 process_data_end ] start
								 */

								currentComponent = "tFileOutputXML_1";

								/**
								 * [tFileOutputXML_1 process_data_end ] stop
								 */

								/**
								 * [tLogRow_4 process_data_end ] start
								 */

								currentComponent = "tLogRow_4";

								/**
								 * [tLogRow_4 process_data_end ] stop
								 */

							} // End of branch "row5"

// Start of branch "row51"
							if (row51 != null) {

								/**
								 * [tLogRow_3 main ] start
								 */

								currentComponent = "tLogRow_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row51");
								}

								row6 = row51;

								tos_count_tLogRow_3++;

								/**
								 * [tLogRow_3 main ] stop
								 */

								/**
								 * [tLogRow_3 process_data_begin ] start
								 */

								currentComponent = "tLogRow_3";

								/**
								 * [tLogRow_3 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputXML_2 main ] start
								 */

								currentComponent = "tFileOutputXML_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
								}

								StringBuilder tempRes_tFileOutputXML_2 = new StringBuilder("<" + "arn");
								tempRes_tFileOutputXML_2.append(" " + "id" + "=\""
										+ ((row6.id == null) ? "" : (TalendString.replaceSpecialCharForXML(row6.id)))
										+ "\"");
								tempRes_tFileOutputXML_2.append(" " + "id_ex" + "=\"" + ((row6.id_ex == null) ? ""
										: (TalendString.replaceSpecialCharForXML(row6.id_ex))) + "\"");
								tempRes_tFileOutputXML_2.append(">");
								out_tFileOutputXML_2.write(tempRes_tFileOutputXML_2.toString());

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "siret" + ">"
										+ ((row6.siret == null) ? "" : (TalendString.checkCDATAForXML(row6.siret)))
										+ "</" + "siret" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "gestion" + ">"
										+ ((row6.gestion == null) ? "" : (TalendString.checkCDATAForXML(row6.gestion)))
										+ "</" + "gestion" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "date_creat" + ">"
										+ ((row6.date_creat == null) ? ""
												: (TalendString.checkCDATAForXML(
														FormatterUtils.format_Date(row6.date_creat, "yyyy-MM-dd"))))
										+ "</" + "date_creat" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "date_publi" + ">"
										+ ((row6.date_publi == null) ? ""
												: (TalendString.checkCDATAForXML(
														FormatterUtils.format_Date(row6.date_publi, "yyyy-MM-dd"))))
										+ "</" + "date_publi" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "nature" + ">"
										+ ((row6.nature == null) ? "" : (TalendString.checkCDATAForXML(row6.nature)))
										+ "</" + "nature" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "groupement" + ">"
										+ ((row6.groupement == null) ? ""
												: (TalendString.checkCDATAForXML(row6.groupement)))
										+ "</" + "groupement" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "titre" + ">"
										+ ((row6.titre == null) ? "" : (TalendString.checkCDATAForXML(row6.titre)))
										+ "</" + "titre" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "objet" + ">"
										+ ((row6.objet == null) ? "" : (TalendString.checkCDATAForXML(row6.objet)))
										+ "</" + "objet" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "objet_social1" + ">"
										+ ((row6.objet_social1 == null) ? ""
												: (TalendString.checkCDATAForXML(row6.objet_social1)))
										+ "</" + "objet_social1" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "objet_social2" + ">"
										+ ((row6.objet_social2 == null) ? ""
												: (TalendString.checkCDATAForXML(row6.objet_social2)))
										+ "</" + "objet_social2" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "adr1" + ">"
										+ ((row6.adr1 == null) ? "" : (TalendString.checkCDATAForXML(row6.adr1))) + "</"
										+ "adr1" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "adr2" + ">"
										+ ((row6.adr2 == null) ? "" : (TalendString.checkCDATAForXML(row6.adr2))) + "</"
										+ "adr2" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "adr3" + ">"
										+ ((row6.adr3 == null) ? "" : (TalendString.checkCDATAForXML(row6.adr3))) + "</"
										+ "adr3" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "adrs_codepostal" + ">"
										+ ((row6.adrs_codepostal == null) ? ""
												: (TalendString.checkCDATAForXML(row6.adrs_codepostal)))
										+ "</" + "adrs_codepostal" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "libcom" + ">"
										+ ((row6.libcom == null) ? "" : (TalendString.checkCDATAForXML(row6.libcom)))
										+ "</" + "libcom" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "adrs_codeinsee" + ">"
										+ ((row6.adrs_codeinsee == null) ? ""
												: (TalendString.checkCDATAForXML(row6.adrs_codeinsee)))
										+ "</" + "adrs_codeinsee" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "dir_civilite" + ">"
										+ ((row6.dir_civilite == null) ? ""
												: (TalendString.checkCDATAForXML(row6.dir_civilite)))
										+ "</" + "dir_civilite" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "siteweb" + ">"
										+ ((row6.siteweb == null) ? "" : (TalendString.checkCDATAForXML(row6.siteweb)))
										+ "</" + "siteweb" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "observation" + ">"
										+ ((row6.observation == null) ? ""
												: (TalendString.checkCDATAForXML(row6.observation)))
										+ "</" + "observation" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "position" + ">"
										+ ((row6.position == null) ? ""
												: (TalendString.checkCDATAForXML(row6.position)))
										+ "</" + "position" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "rup_mi" + ">"
										+ ((row6.rup_mi == null) ? "" : (TalendString.checkCDATAForXML(row6.rup_mi)))
										+ "</" + "rup_mi" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "maj_time" + ">"
										+ ((row6.maj_time == null) ? ""
												: (TalendString.checkCDATAForXML(row6.maj_time)))
										+ "</" + "maj_time" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("<" + "errorMessage" + ">"
										+ ((row6.errorMessage == null) ? ""
												: (TalendString.checkCDATAForXML(row6.errorMessage)))
										+ "</" + "errorMessage" + ">");

								out_tFileOutputXML_2.newLine();
								out_tFileOutputXML_2.write("</" + "arn" + ">");

								out_tFileOutputXML_2.newLine();

								nb_line_tFileOutputXML_2++;

								tos_count_tFileOutputXML_2++;

								/**
								 * [tFileOutputXML_2 main ] stop
								 */

								/**
								 * [tFileOutputXML_2 process_data_begin ] start
								 */

								currentComponent = "tFileOutputXML_2";

								/**
								 * [tFileOutputXML_2 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputXML_2 process_data_end ] start
								 */

								currentComponent = "tFileOutputXML_2";

								/**
								 * [tFileOutputXML_2 process_data_end ] stop
								 */

								/**
								 * [tLogRow_3 process_data_end ] start
								 */

								currentComponent = "tLogRow_3";

								/**
								 * [tLogRow_3 process_data_end ] stop
								 */

							} // End of branch "row51"

							/**
							 * [tFilterRow_1 process_data_end ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_end ] stop
							 */

							/**
							 * [tAssert_1 process_data_end ] start
							 */

							currentComponent = "tAssert_1";

							/**
							 * [tAssert_1 process_data_end ] stop
							 */

							/**
							 * [vFlowMeter_row1 process_data_end ] start
							 */

							currentComponent = "vFlowMeter_row1";

							/**
							 * [vFlowMeter_row1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [vFlowMeter_row1 end ] start
				 */

				currentComponent = "vFlowMeter_row1";

				tFlowMeterCatcher_1.addMessage("row1", new Integer(count_vFlowMeter_row1), "null", "",
						"vFlowMeter_row1");

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("vFlowMeter_row1", true);
				end_Hash.put("vFlowMeter_row1", System.currentTimeMillis());

				/**
				 * [vFlowMeter_row1 end ] stop
				 */

				/**
				 * [tAssert_1 end ] start
				 */

				currentComponent = "tAssert_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "meterRowrow1");
				}

				ok_Hash.put("tAssert_1", true);
				end_Hash.put("tAssert_1", System.currentTimeMillis());

				/**
				 * [tAssert_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

				/**
				 * [tFileOutputXML_1 end ] start
				 */

				currentComponent = "tFileOutputXML_1";

				out_tFileOutputXML_1.write(footers_tFileOutputXML_1[0]);

				out_tFileOutputXML_1.newLine();
				out_tFileOutputXML_1.close();
				globalMap.put("tFileOutputXML_1_NB_LINE", nb_line_tFileOutputXML_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tFileOutputXML_1", true);
				end_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				/**
				 * [tFileOutputXML_1 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row51");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tFileOutputXML_2 end ] start
				 */

				currentComponent = "tFileOutputXML_2";

				out_tFileOutputXML_2.write(footers_tFileOutputXML_2[0]);

				out_tFileOutputXML_2.newLine();
				out_tFileOutputXML_2.close();
				globalMap.put("tFileOutputXML_2_NB_LINE", nb_line_tFileOutputXML_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tFileOutputXML_2", true);
				end_Hash.put("tFileOutputXML_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tWarn_1Process(globalMap);

				/**
				 * [tFileOutputXML_2 end ] stop
				 */

			} // end the resume

			tFlowMeterCatcher_1Process(globalMap);

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tChronometerStop_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [vFlowMeter_row1 finally ] start
				 */

				currentComponent = "vFlowMeter_row1";

				/**
				 * [vFlowMeter_row1 finally ] stop
				 */

				/**
				 * [tAssert_1 finally ] start
				 */

				currentComponent = "tAssert_1";

				/**
				 * [tAssert_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

				/**
				 * [tFileOutputXML_1 finally ] start
				 */

				currentComponent = "tFileOutputXML_1";

				/**
				 * [tFileOutputXML_1 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tFileOutputXML_2 finally ] start
				 */

				currentComponent = "tFileOutputXML_2";

				/**
				 * [tFileOutputXML_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				try {
					tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "Impossible de generer le resultat", 10);
					tLogCatcher_1Process(globalMap);

					globalMap.put("tDie_1_DIE_PRIORITY", 5);
					System.err.println("Impossible de generer le resultat");

					globalMap.put("tDie_1_DIE_MESSAGE", "Impossible de generer le resultat");
					globalMap.put("tDie_1_DIE_MESSAGES", "Impossible de generer le resultat");

				} catch (Exception | Error e_tDie_1) {
					logIgnoredError(
							String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1),
							e_tDie_1);
				}

				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(10);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 process_data_begin ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 process_data_begin ] stop
				 */

				/**
				 * [tDie_1 process_data_end ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 process_data_end ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tWarn_1 begin ] start
				 */

				ok_Hash.put("tWarn_1", false);
				start_Hash.put("tWarn_1", System.currentTimeMillis());

				currentComponent = "tWarn_1";

				int tos_count_tWarn_1 = 0;

				/**
				 * [tWarn_1 begin ] stop
				 */

				/**
				 * [tWarn_1 main ] start
				 */

				currentComponent = "tWarn_1";

				try {

					resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "ERROR",
							"", "Alerte: des rejets sont générés", "", "");
					tLogCatcher_1.addMessage("tWarn", "tWarn_1", 5, "Alerte: des rejets sont générés", 30);
					tLogCatcher_1Process(globalMap);
					globalMap.put("tWarn_1_WARN_MESSAGES", "Alerte: des rejets sont générés");
					globalMap.put("tWarn_1_WARN_PRIORITY", 5);
					globalMap.put("tWarn_1_WARN_CODE", 30);

				} catch (Exception e_tWarn_1) {
					logIgnoredError(
							String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1),
							e_tWarn_1);
				}

				tos_count_tWarn_1++;

				/**
				 * [tWarn_1 main ] stop
				 */

				/**
				 * [tWarn_1 process_data_begin ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 process_data_begin ] stop
				 */

				/**
				 * [tWarn_1 process_data_end ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 process_data_end ] stop
				 */

				/**
				 * [tWarn_1 end ] start
				 */

				currentComponent = "tWarn_1";

				ok_Hash.put("tWarn_1", true);
				end_Hash.put("tWarn_1", System.currentTimeMillis());

				/**
				 * [tWarn_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_1 finally ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}

	public void tChronometerStop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tChronometerStop_1 begin ] start
				 */

				ok_Hash.put("tChronometerStop_1", false);
				start_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				currentComponent = "tChronometerStop_1";

				int tos_count_tChronometerStop_1 = 0;

				long timetChronometerStop_1;

				timetChronometerStop_1 = System.currentTimeMillis() - startTime;

				System.out.print("[ tChronometerStop_1 ]  ");

				System.out.println("" + "  " + timetChronometerStop_1 + " milliseconds");

				Long currentTimetChronometerStop_1 = System.currentTimeMillis();
				globalMap.put("tChronometerStop_1", currentTimetChronometerStop_1);

				globalMap.put("tChronometerStop_1_STOPTIME", currentTimetChronometerStop_1);
				globalMap.put("tChronometerStop_1_DURATION", timetChronometerStop_1);

				/**
				 * [tChronometerStop_1 begin ] stop
				 */

				/**
				 * [tChronometerStop_1 main ] start
				 */

				currentComponent = "tChronometerStop_1";

				tos_count_tChronometerStop_1++;

				/**
				 * [tChronometerStop_1 main ] stop
				 */

				/**
				 * [tChronometerStop_1 process_data_begin ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 process_data_begin ] stop
				 */

				/**
				 * [tChronometerStop_1 process_data_end ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 process_data_end ] stop
				 */

				/**
				 * [tChronometerStop_1 end ] start
				 */

				currentComponent = "tChronometerStop_1";

				ok_Hash.put("tChronometerStop_1", true);
				end_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				/**
				 * [tChronometerStop_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tChronometerStop_1 finally ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_FORMATION_AssertARNContent = new byte[0];
		static byte[] commonByteArray_FORMATION_AssertARNContent = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_AssertARNContent.length) {
					if (length < 1024 && commonByteArray_FORMATION_AssertARNContent.length == 0) {
						commonByteArray_FORMATION_AssertARNContent = new byte[1024];
					} else {
						commonByteArray_FORMATION_AssertARNContent = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_AssertARNContent, 0, length);
				strReturn = new String(commonByteArray_FORMATION_AssertARNContent, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_AssertARNContent) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFlowMeterCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tLogRow_5 = 0;

				///////////////////////

				class Util_tLogRow_5 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[15];

					public void addRow(String[] row) {

						for (int i = 0; i < 15; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 14 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 14 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[14] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_5 util_tLogRow_5 = new Util_tLogRow_5();
				util_tLogRow_5.setTableName("FlowMeter");
				util_tLogRow_5.addRow(new String[] { "moment", "pid", "father_pid", "root_pid", "system_pid", "project",
						"job", "job_repository_id", "job_version", "context", "origin", "label", "count", "reference",
						"thresholds", });
				StringBuilder strBuffer_tLogRow_5 = null;
				int nb_line_tLogRow_5 = 0;
///////////////////////    			

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tFlowMeterCatcher_1 begin ] start
				 */

				ok_Hash.put("tFlowMeterCatcher_1", false);
				start_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

				currentComponent = "tFlowMeterCatcher_1";

				int tos_count_tFlowMeterCatcher_1 = 0;

				for (MetterCatcherUtils.MetterCatcherMessage mcm : tFlowMeterCatcher_1.getMessages()) {
					row8.pid = pid;
					row8.root_pid = rootPid;
					row8.father_pid = fatherPid;
					row8.project = projectName;
					row8.job = jobName;
					row8.context = contextStr;
					row8.origin = (mcm.getOrigin() == null || mcm.getOrigin().length() < 1 ? null : mcm.getOrigin());
					row8.moment = mcm.getMoment();
					row8.job_version = mcm.getJobVersion();
					row8.job_repository_id = mcm.getJobId();
					row8.system_pid = mcm.getSystemPid();
					row8.label = mcm.getLabel();
					row8.count = mcm.getCount();
					row8.reference = tFlowMeterCatcher_1.getConnLinesCount(mcm.getReferense() + "_count");
					row8.thresholds = mcm.getThresholds();

					/**
					 * [tFlowMeterCatcher_1 begin ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 main ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					tos_count_tFlowMeterCatcher_1++;

					/**
					 * [tFlowMeterCatcher_1 main ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					/**
					 * [tFlowMeterCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_5 main ] start
					 */

					currentComponent = "tLogRow_5";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
					}

///////////////////////		

					String[] row_tLogRow_5 = new String[15];

					if (row8.moment != null) { //
						row_tLogRow_5[0] = FormatterUtils.format_Date(row8.moment, "yyyy-MM-dd HH:mm:ss");

					} //

					if (row8.pid != null) { //
						row_tLogRow_5[1] = String.valueOf(row8.pid);

					} //

					if (row8.father_pid != null) { //
						row_tLogRow_5[2] = String.valueOf(row8.father_pid);

					} //

					if (row8.root_pid != null) { //
						row_tLogRow_5[3] = String.valueOf(row8.root_pid);

					} //

					if (row8.system_pid != null) { //
						row_tLogRow_5[4] = String.valueOf(row8.system_pid);

					} //

					if (row8.project != null) { //
						row_tLogRow_5[5] = String.valueOf(row8.project);

					} //

					if (row8.job != null) { //
						row_tLogRow_5[6] = String.valueOf(row8.job);

					} //

					if (row8.job_repository_id != null) { //
						row_tLogRow_5[7] = String.valueOf(row8.job_repository_id);

					} //

					if (row8.job_version != null) { //
						row_tLogRow_5[8] = String.valueOf(row8.job_version);

					} //

					if (row8.context != null) { //
						row_tLogRow_5[9] = String.valueOf(row8.context);

					} //

					if (row8.origin != null) { //
						row_tLogRow_5[10] = String.valueOf(row8.origin);

					} //

					if (row8.label != null) { //
						row_tLogRow_5[11] = String.valueOf(row8.label);

					} //

					if (row8.count != null) { //
						row_tLogRow_5[12] = String.valueOf(row8.count);

					} //

					if (row8.reference != null) { //
						row_tLogRow_5[13] = String.valueOf(row8.reference);

					} //

					if (row8.thresholds != null) { //
						row_tLogRow_5[14] = String.valueOf(row8.thresholds);

					} //

					util_tLogRow_5.addRow(row_tLogRow_5);
					nb_line_tLogRow_5++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_5++;

					/**
					 * [tLogRow_5 main ] stop
					 */

					/**
					 * [tLogRow_5 process_data_begin ] start
					 */

					currentComponent = "tLogRow_5";

					/**
					 * [tLogRow_5 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_5 process_data_end ] start
					 */

					currentComponent = "tLogRow_5";

					/**
					 * [tLogRow_5 process_data_end ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 process_data_end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

					/**
					 * [tFlowMeterCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tFlowMeterCatcher_1 end ] start
					 */

					currentComponent = "tFlowMeterCatcher_1";

				}

				ok_Hash.put("tFlowMeterCatcher_1", true);
				end_Hash.put("tFlowMeterCatcher_1", System.currentTimeMillis());

				/**
				 * [tFlowMeterCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

//////

				java.io.PrintStream consoleOut_tLogRow_5 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_5);
				}

				consoleOut_tLogRow_5.println(util_tLogRow_5.format().toString());
				consoleOut_tLogRow_5.flush();
//////
				globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFlowMeterCatcher_1 finally ] start
				 */

				currentComponent = "tFlowMeterCatcher_1";

				/**
				 * [tFlowMeterCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFlowMeterCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_FORMATION_AssertARNContent = new byte[0];
		static byte[] commonByteArray_FORMATION_AssertARNContent = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_AssertARNContent.length) {
					if (length < 1024 && commonByteArray_FORMATION_AssertARNContent.length == 0) {
						commonByteArray_FORMATION_AssertARNContent = new byte[1024];
					} else {
						commonByteArray_FORMATION_AssertARNContent = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_AssertARNContent, 0, length);
				strReturn = new String(commonByteArray_FORMATION_AssertARNContent, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_AssertARNContent) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[12];

					public void addRow(String[] row) {

						for (int i = 0; i < 12; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 11 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 11 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[11] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
				util_tLogRow_2.setTableName("LogCatcher");
				util_tLogRow_2.addRow(new String[] { "moment", "pid", "root_pid", "father_pid", "project", "job",
						"context", "priority", "type", "origin", "message", "code", });
				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
						row3.type = lcm.getType();
						row3.origin = (lcm.getOrigin() == null || lcm.getOrigin().length() < 1 ? null
								: lcm.getOrigin());
						row3.priority = lcm.getPriority();
						row3.message = lcm.getMessage();
						row3.code = lcm.getCode();

						row3.moment = java.util.Calendar.getInstance().getTime();

						row3.pid = pid;
						row3.root_pid = rootPid;
						row3.father_pid = fatherPid;

						row3.project = projectName;
						row3.job = jobName;
						row3.context = contextStr;

						/**
						 * [tLogCatcher_1 begin ] stop
						 */

						/**
						 * [tLogCatcher_1 main ] start
						 */

						currentComponent = "tLogCatcher_1";

						tos_count_tLogCatcher_1++;

						/**
						 * [tLogCatcher_1 main ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_begin ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 main ] start
						 */

						currentComponent = "tLogRow_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
						}

///////////////////////		

						String[] row_tLogRow_2 = new String[12];

						if (row3.moment != null) { //
							row_tLogRow_2[0] = FormatterUtils.format_Date(row3.moment, "yyyy-MM-dd HH:mm:ss");

						} //

						if (row3.pid != null) { //
							row_tLogRow_2[1] = String.valueOf(row3.pid);

						} //

						if (row3.root_pid != null) { //
							row_tLogRow_2[2] = String.valueOf(row3.root_pid);

						} //

						if (row3.father_pid != null) { //
							row_tLogRow_2[3] = String.valueOf(row3.father_pid);

						} //

						if (row3.project != null) { //
							row_tLogRow_2[4] = String.valueOf(row3.project);

						} //

						if (row3.job != null) { //
							row_tLogRow_2[5] = String.valueOf(row3.job);

						} //

						if (row3.context != null) { //
							row_tLogRow_2[6] = String.valueOf(row3.context);

						} //

						if (row3.priority != null) { //
							row_tLogRow_2[7] = String.valueOf(row3.priority);

						} //

						if (row3.type != null) { //
							row_tLogRow_2[8] = String.valueOf(row3.type);

						} //

						if (row3.origin != null) { //
							row_tLogRow_2[9] = String.valueOf(row3.origin);

						} //

						if (row3.message != null) { //
							row_tLogRow_2[10] = String.valueOf(row3.message);

						} //

						if (row3.code != null) { //
							row_tLogRow_2[11] = String.valueOf(row3.code);

						} //

						util_tLogRow_2.addRow(row_tLogRow_2);
						nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

						tos_count_tLogRow_2++;

						/**
						 * [tLogRow_2 main ] stop
						 */

						/**
						 * [tLogRow_2 process_data_begin ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_begin ] stop
						 */

						/**
						 * [tLogRow_2 process_data_end ] start
						 */

						currentComponent = "tLogRow_2";

						/**
						 * [tLogRow_2 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 process_data_end ] start
						 */

						currentComponent = "tLogCatcher_1";

						/**
						 * [tLogCatcher_1 process_data_end ] stop
						 */

						/**
						 * [tLogCatcher_1 end ] start
						 */

						currentComponent = "tLogCatcher_1";

					}
				} catch (Exception e_tLogCatcher_1) {
					logIgnoredError(String.format(
							"tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s",
							e_tLogCatcher_1), e_tLogCatcher_1);
				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
				consoleOut_tLogRow_2.flush();
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_FORMATION_AssertARNContent = new byte[0];
		static byte[] commonByteArray_FORMATION_AssertARNContent = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_AssertARNContent.length) {
					if (length < 1024 && commonByteArray_FORMATION_AssertARNContent.length == 0) {
						commonByteArray_FORMATION_AssertARNContent = new byte[1024];
					} else {
						commonByteArray_FORMATION_AssertARNContent = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_AssertARNContent, 0, length);
				strReturn = new String(commonByteArray_FORMATION_AssertARNContent, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_AssertARNContent) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[14];

					public void addRow(String[] row) {

						for (int i = 0; i < 14; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 13 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 13 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[13] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("StatCatcher");
				util_tLogRow_1.addRow(new String[] { "moment", "pid", "father_pid", "root_pid", "system_pid", "project",
						"job", "job_repository_id", "job_version", "context", "origin", "message_type", "message",
						"duration", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1.getMessages()) {
					row7.pid = pid;
					row7.root_pid = rootPid;
					row7.father_pid = fatherPid;
					row7.project = projectName;
					row7.job = jobName;
					row7.context = contextStr;
					row7.origin = (scm.getOrigin() == null || scm.getOrigin().length() < 1 ? null : scm.getOrigin());
					row7.message = scm.getMessage();
					row7.duration = scm.getDuration();
					row7.moment = scm.getMoment();
					row7.message_type = scm.getMessageType();
					row7.job_version = scm.getJobVersion();
					row7.job_repository_id = scm.getJobId();
					row7.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_begin ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
					}

///////////////////////		

					String[] row_tLogRow_1 = new String[14];

					if (row7.moment != null) { //
						row_tLogRow_1[0] = FormatterUtils.format_Date(row7.moment, "yyyy-MM-dd HH:mm:ss");

					} //

					if (row7.pid != null) { //
						row_tLogRow_1[1] = String.valueOf(row7.pid);

					} //

					if (row7.father_pid != null) { //
						row_tLogRow_1[2] = String.valueOf(row7.father_pid);

					} //

					if (row7.root_pid != null) { //
						row_tLogRow_1[3] = String.valueOf(row7.root_pid);

					} //

					if (row7.system_pid != null) { //
						row_tLogRow_1[4] = String.valueOf(row7.system_pid);

					} //

					if (row7.project != null) { //
						row_tLogRow_1[5] = String.valueOf(row7.project);

					} //

					if (row7.job != null) { //
						row_tLogRow_1[6] = String.valueOf(row7.job);

					} //

					if (row7.job_repository_id != null) { //
						row_tLogRow_1[7] = String.valueOf(row7.job_repository_id);

					} //

					if (row7.job_version != null) { //
						row_tLogRow_1[8] = String.valueOf(row7.job_version);

					} //

					if (row7.context != null) { //
						row_tLogRow_1[9] = String.valueOf(row7.context);

					} //

					if (row7.origin != null) { //
						row_tLogRow_1[10] = String.valueOf(row7.origin);

					} //

					if (row7.message_type != null) { //
						row_tLogRow_1[11] = String.valueOf(row7.message_type);

					} //

					if (row7.message != null) { //
						row_tLogRow_1[12] = String.valueOf(row7.message);

					} //

					if (row7.duration != null) { //
						row_tLogRow_1[13] = String.valueOf(row7.duration);

					} //

					util_tLogRow_1.addRow(row_tLogRow_1);
					nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 process_data_end ] start
					 */

					currentComponent = "tStatCatcher_1";

					/**
					 * [tStatCatcher_1 process_data_end ] stop
					 */

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "LOCAL";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final AssertARNContent AssertARNContentClass = new AssertARNContent();

		int exitCode = AssertARNContentClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = AssertARNContent.class.getClassLoader()
					.getResourceAsStream("formation/assertarncontent_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = AssertARNContent.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("ARN_DIR", "id_Directory");
					context.ARN_DIR = (String) context.getProperty("ARN_DIR");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("ARN_DIR")) {
				context.ARN_DIR = (String) parentContextMap.get("ARN_DIR");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tChronometerStart_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tChronometerStart_1) {
			globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", -1);

			e_tChronometerStart_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : AssertARNContent");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status, (end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 261475 characters generated by Talend Open Studio for Data Integration on the
 * 5 juin 2020 18:19:09 CEST
 ************************************************************************************************/